[XComGame.XGAIBehavior]
+AoEProfiles=( Profile=PhantomKillzoneProfile, Ability=KillZone, bIgnoreSelfDamage=True, bFailOnObjectiveFire=false, bFailOnFriendlyFire=false, MinTargets=2)

[XComGame.X2AIBTBehaviorTree]
; --- don't shoot if you're not an alien
; --- basically since non alien units don't really obey the objective target limits, never let them target the objective in the first place
-Behaviors=(BehaviorName=TryAttackPriorityTarget, NodeType=Sequence, Child[0]=HasPriorityTarget, Child[1]=AttackPriorityTarget)
+Behaviors=(BehaviorName=TryAttackPriorityTarget, NodeType=Sequence, Child[0]=IsTeam-eTeam_Alien, Child[1]=HasPriorityTarget, Child[2]=AttackPriorityTarget)

+EquivalentAbilities=( KeyName=StandardShot, EquivalentAbilityName[0]=RelocationShot, EquivalentAbilityName[1]=PenaltyShot)
+EquivalentAbilities=( KeyName=Overwatch, EquivalentAbilityName[0]=LongWatch)
+EquivalentAbilities=( KeyName=Phantom_Vanish, EquivalentAbilityName[0]=PhantomHuntsmaster_Vanish)

+CustomNodes=(NodeTypeString="PhantomsCondition", ExtendsFromType="Condition", ClassName="Phantoms.X2AIBTCondition_NoObjectiveBehavior")
+Behaviors=(BehaviorName=IsObjectiveUnitOrAnObject, NodeType=PhantomsCondition)
+Behaviors=(BehaviorName=IsNotObjectiveUnitOrAnObject, NodeType=Inverter, Child[0]=IsObjectiveUnitOrAnObject)

;new shoot or reload or overwatch to avoid targeting civilians
+Behaviors=(BehaviorName=TryShootOrReloadOrOverwatch_Phantom, NodeType=Selector, Child[0]=ConsiderTakingOverwatch, Child[1]=ShootIfAvailable_Phantom, Child[2]=NeedsReload)
+Behaviors=(BehaviorName=ShootIfAvailable_Phantom, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectTargetForStandardShot_Phantom, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectTargetForStandardShot_Phantom, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=GenericSelectBestTarget_Phantom, Child[2]=HasValidTarget-StandardShot)

+Behaviors=(BehaviorName=GenericSelectBestTarget_Phantom, NodeType=RepeatUntilFail, Child[0]=GenericEvaluateTarget_Phantom)
+Behaviors=(BehaviorName=GenericEvaluateTarget_Phantom, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=GenericTargetEvaluations_Phantom, Child[2]=UpdateBestTarget);
+Behaviors=(BehaviorName=GenericTargetEvaluations_Phantom, NodeType=Sequence, Child[0]=TargetScoreHitChance, Child[1]=TargetScoreHealth, Child[2]=TargetScoreFlanking, Child[3]=TargetScoreMarked, Child[4]=ApplyDifficultyModifiers, Child[5]=TargetScoreInvalidateCivilians, Child[6]=IsNotObjectiveUnitOrAnObject, Child[7]=AvoidBoundAndPanickedTargets)


; bullet shread
+Behaviors=(BehaviorName=IsAbilityAvailable-BulletShred, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-BulletShred, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-BulletShred, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-BulletShred, NodeType=Condition)
+Behaviors=(BehaviorName=TryReaperShred, NodeType=Sequence, Child[0]=IsAbilityAvailable-BulletShred, Child[1]=SelectTargetForReaperShred, Child[2]=SelectAbility-BulletShred)
+Behaviors=(BehaviorName=SelectTargetForReaperShred, NodeType=Sequence, Child[0]=SetTargetStack-BulletShred, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-BulletShred)

; + Lightning Hands
+Behaviors=(BehaviorName=IsAbilityAvailable-LightningHands, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-LightningHands, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-LightningHands, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-LightningHands, NodeType=Condition)
+Behaviors=(BehaviorName=TryLightningHands, NodeType=Sequence, Child[0]=IsAbilityAvailable-LightningHands, Child[1]=SelectTargetForLightningHands, Child[2]=SelectAbility-LightningHands)
+Behaviors=(BehaviorName=SelectTargetForLightningHands, NodeType=Sequence, Child[0]=SetTargetStack-LightningHands, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-LightningHands)

; Vanish
+Behaviors=(BehaviorName=TryPhantomVanish, NodeType=Sequence, Child[0]=IsAbilityAvailable-Phantom_Vanish, Child[1]=SelectAbility-Phantom_Vanish)
+Behaviors=(BehaviorName=IsAbilityAvailable-Phantom_Vanish, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-Phantom_Vanish, NodeType=Action)

+Behaviors=(BehaviorName=TryPhantomKillZone, NodeType=Sequence, Child[0]=IsAbilityAvailable-KillZone, Child[1]=FindPotentialAoETargets-PhantomKillZoneProfile, Child[2]=SelectAoETarget-PhantomKillZoneProfile, Child[3]=SelectAbility-KillZone)

+Behaviors=(BehaviorName=FindPotentialAoETargets-PhantomKillZoneProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-PhantomKillZoneProfile, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityAvailable-KillZone, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-KillZone, NodeType=Action)

+Behaviors=(BehaviorName="PhantomHuntsmasterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=PhantomHuntsmaster_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=PhantomHuntsmaster_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=PhantomHuntsmaster_RedAbilitySelector)
+Behaviors=(BehaviorName=PhantomHuntsmaster_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=PhantomHuntsmasterRedFirstAction, Child[2]=PhantomHuntsmasterRedLastAction)

+Behaviors=(BehaviorName=PhantomHuntsmasterRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=PhantomHuntsmasterRedFirstActionSelector)
+Behaviors=(BehaviorName=PhantomHuntsmasterRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=TryPhantomVanish, \\
	Child[2]=TryReaperShred, \\
	Child[3]=TryLightningHands, \\
	Child[4]=TryRemoteFuse,\\
	Child[5]=TryMoveThenGrenadeAny, \\
	Child[6]=TryPhantomKillzone, \\
	Child[7]=TryShootOrReloadOrOverwatch_Phantom, \\
	Child[8]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=PhantomHuntsmasterRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=PhantomHuntsmasterRedLastActionSelector)
+Behaviors=(BehaviorName=PhantomHuntsmasterRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryPhantomVanish, \\
	Child[1]=TryGrenadeAny, \\
	Child[2]=TryReaperShred, \\
	Child[3]=TryLightningHands, \\
	Child[4]=TryRemoteFuse,\\
	Child[5]=TryMoveThenGrenadeAny, \\
	Child[6]=TryPhantomKillzone, \\
	Child[7]=TryShootOrReloadOrOverwatch_Phantom, \\
	Child[8]=HuntEnemyWithCover, \\
	Child[9]=SelectMove_JobOrAggressive)

;ghost
+Behaviors=(BehaviorName="PhantomGhostRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=PhantomGhost_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=PhantomGhost_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=PhantomGhost_RedAbilitySelector)
+Behaviors=(BehaviorName=PhantomGhost_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=PhantomGhostRedFirstAction, Child[2]=PhantomGhostRedLastAction)

+Behaviors=(BehaviorName=PhantomGhostRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=PhantomGhostRedFirstActionSelector)
+Behaviors=(BehaviorName=PhantomGhostRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=TryMoveThenGrenadeAny, \\
	Child[2]=TryShootOrReloadOrOverwatch_Phantom, \\
	Child[3]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=PhantomGhostRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=PhantomGhostRedLastActionSelector)
+Behaviors=(BehaviorName=PhantomGhostRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryGrenadeAny, \\
	Child[1]=TryShootOrReloadOrOverwatch_Phantom, \\
	Child[2]=HuntEnemyWithCover, \\
	Child[3]=SelectMove_JobOrAggressive)


+Behaviors=(BehaviorName="PhantomMarksmanRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=PhantomMarksman_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=PhantomMarksman_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=PhantomMarksman_RedAbilitySelector)
+Behaviors=(BehaviorName=PhantomMarksman_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=PhantomMarksmanRedFirstAction, Child[2]=PhantomMarksmanRedLastAction)

+Behaviors=(BehaviorName=PhantomMarksmanRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=PhantomMarksmanRedFirstActionSelector)
+Behaviors=(BehaviorName=PhantomMarksmanRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=TryPhantomKillzone, \\
	Child[2]=TryShootOrReloadOrOverwatch_Phantom, \\
	Child[3]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=PhantomMarksmanRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=PhantomMarksmanRedLastActionSelector)
+Behaviors=(BehaviorName=PhantomMarksmanRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryPhantomKillzone, \\
	Child[1]=TryShootOrReloadOrOverwatch_Phantom, \\
	Child[2]=HuntEnemyWithCover, \\
	Child[3]=SelectMove_JobOrAggressive)


+Behaviors=(BehaviorName="PhantomHunterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=PhantomHunter_RedAlert, Child[3]=GenericAlertHandler)

+Behaviors=(BehaviorName=PhantomHunter_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=PhantomHunter_RedAbilitySelector)
+Behaviors=(BehaviorName=PhantomHunter_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=PhantomHunterRedFirstAction, Child[2]=PhantomHunterRedLastAction)

+Behaviors=(BehaviorName=PhantomHunterRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=PhantomHunterRedFirstActionSelector)
; Update - removed stand-alone MoveAggressive since it should be linked with the desired ability to be used.

+Behaviors=(BehaviorName=PhantomHunterRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=TryPhantomVanish, \\
	Child[2]=TryLightningHands, \\
	Child[3]=SelectMoveProfileByJob, \\
	Child[4]=TryShootOrReloadOrOverwatch_Phantom, \\
	Child[5]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=PhantomHunterRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=PhantomHunterRedLastActionSelector)
+Behaviors=(BehaviorName=PhantomHunterRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryPhantomVanish, \\
	Child[1]=TryLightningHands, \\
	Child[2]=TryRemoteFuse, \\
	Child[3]=TryShootOrReloadOrOverwatch_Phantom, \\
	Child[4]=HuntEnemyWithCover, \\
	Child[5]=SelectMove_JobOrAggressive) 

;+Behaviors=(BehaviorName=TryRendOrVolt, NodeType=RandSelector, Child[0]=TryRend, Param[0]=75, Child[1]=TryVolt, Param[1]=25)


;RemoteFuse
+Behaviors=(BehaviorName=TryRemoteFuse, NodeType=Sequence, Child[0]=IsAbilityAvailable-RemoteFuse, Child[1]=NotLastEnemy, Child[2]=SelectTargetForRemoteFuse, Child[3]=SelectAbility-RemoteFuse) 
+Behaviors=(BehaviorName=IsAbilityAvailable-RemoteFuse, NodeType=Condition)
+Behaviors=(BehaviorName=SelectTargetForRemoteFuse, NodeType=Sequence, Child[0]=SetTargetStack-RemoteFuse, Child[1]=IterateTargetsForRemoteFuse, Child[2]=HasValidTarget-RemoteFuse)
+Behaviors=(BehaviorName=SetTargetStack-RemoteFuse, NodeType=Action)
+Behaviors=(BehaviorName=IterateTargetsForRemoteFuse, NodeType=RepeatUntilFail, Child[0]=IterateNextTargetForRemoteFuse)
+Behaviors=(BehaviorName=IterateNextTargetForRemoteFuse, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSEvaluateForRemoteFuse, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSEvaluateForRemoteFuse, NodeType=Successor, Child[0]=EvaluateForRemoteFuse)
+Behaviors=(BehaviorName=EvaluateForRemoteFuse, NodeType=Sequence, Child[0]=TargetIsNotCivilian, Child[1]=TargetNotTeamTheLost, Child[2]=TargetIsEnemy, Child[3]=TargetIsNotEnemyVIP, Child[4]=TargetNotBoundOrPanicked, Child[5]=TargetIsAttackable, Child[6]=TargetScoreByScaledDistance-1, Child[7]=AddToTargetScore_100, Child[8]=AddSmallRandomTargetScore)
+Behaviors=(BehaviorName=TargetIsAttackable, NodeType=Inverter, Child[0]=TargetIsNotAttackable)
+Behaviors=(BehaviorName=HasValidTarget-RemoteFuse, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-RemoteFuse, NodeType=Action)
+Behaviors=(BehaviorName=TargetNotTeamTheLost, NodeType=Inverter, Child[0]=IsTargetTeam-eTeam_TheLost)