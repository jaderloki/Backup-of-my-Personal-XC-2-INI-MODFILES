[XComGame.XGAIBehavior]
+AoEProfiles=( Profile=IonicStormProfile_aggro, Ability=IonicStorm, bUsePrecomputePath=0, MinTargets=1, bRequireLos=1) 
+AoEProfiles=( Profile=IonicStormProfile_prio, Ability=IonicStorm, bUsePrecomputePath=0, bFailOnFriendlyFire=1, bRequireLos=1)
+AoEProfiles=( Profile=IonicStormProfile_norm, Ability=IonicStorm, bUsePrecomputePath=0, bRequireLos=1) 

[XComGame.X2AIBTBehaviorTree]
+EquivalentAbilities=( KeyName=StandardMelee, EquivalentAbilityName[0]=Rend )
+EquivalentAbilities=( KeyName=MarkTarget, EquivalentAbilityName[0]=RM_DarkInvert )

+Behaviors=(BehaviorName=AffectedByEffect-BleedingOut, NodeType=Condition)
+Behaviors=(BehaviorName=AffectedByEffect-Unconscious, NodeType=Condition)

+Behaviors=(BehaviorName=BleedOutPass, NodeType=Selector, \\
	Child[0]=TrySkipTurnForBleedOut, \\
	Child[1]=TrySkipTurnForUnconscious)

+Behaviors=(BehaviorName="TrySkipTurnForBleedOut", NodeType=Sequence, Child[0]=AffectedByEffect-BleedingOut, Child[1]=SkipMove)
+Behaviors=(BehaviorName="TrySkipTurnForUnconscious", NodeType=Sequence, Child[0]=AffectedByEffect-Unconscious, Child[1]=SkipMove)

+Behaviors=(BehaviorName="DarkZealotRoot", NodeType=Selector, Child[0]=BleedOutPass, Child[1]=TryJob, Child[2]=GenericGreenMovement, Child[3]=RM_DarkZealot_RedAlert, Child[4]=GenericAlertHandler, Child[5]=SkipMove)

+CustomNodes=(NodeTypeString="DarkZealotCondition", ExtendsFromType="Condition", ClassName="MOCXKnightClass.X2AIBT_DarkZealot_Conditions")
+Behaviors=(BehaviorName=CheckTemplarFocusLevelMoreThanOne, NodeType=DarkZealotCondition)  
;this checks for a focus level better than one

; abilities to add
; volt - this requires focus, but otherwise normal
+Behaviors=(BehaviorName=TryDarkVolt, NodeType=Sequence, Child[0]=IsAbilityAvailable-Volt, Child[1]=SelectTargetForVolt, Child[2]=SelectAbility-Volt) 
+Behaviors=(BehaviorName=IsAbilityAvailable-Volt, NodeType=Condition)
+Behaviors=(BehaviorName=SelectTargetForVolt, NodeType=Sequence, Child[0]=SetTargetStack-Volt, Child[1]=IterateTargetsForVolt, Child[2]=HasValidTarget-Volt)
+Behaviors=(BehaviorName=SetTargetStack-Volt, NodeType=Action)
+Behaviors=(BehaviorName=IterateTargetsForVolt, NodeType=RepeatUntilFail, Child[0]=IterateNextTargetForVolt)
+Behaviors=(BehaviorName=IterateNextTargetForVolt, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSEvaluateForVolt, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSEvaluateForVolt, NodeType=Successor, Child[0]=EvaluateForVolt)
+Behaviors=(BehaviorName=EvaluateForVolt, NodeType=Sequence, Child[0]=TargetIsNotCivilian, Child[1]=TargetNotTeamTheLost, Child[2]=TargetIsEnemy, Child[3]=TargetIsNotEnemyVIP, Child[4]=TargetNotBoundOrPanicked, Child[5]=TargetIsAttackable, Child[6]=TargetScoreByScaledDistance-1, Child[7]=AddToTargetScore_100, Child[8]=AddSmallRandomTargetScore)
+Behaviors=(BehaviorName=TargetIsAttackable, NodeType=Inverter, Child[0]=TargetIsNotAttackable)
+Behaviors=(BehaviorName=HasValidTarget-Volt, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-Volt, NodeType=Action)
+Behaviors=(BehaviorName=TargetNotTeamTheLost, NodeType=Inverter, Child[0]=IsTargetTeam-eTeam_TheLost)

; parry
+Behaviors=(BehaviorName=TryDarkParry, NodeType=Sequence, Child[0]=IsAbilityReady-ParryActivate, Child[1]=SelectAbility-ParryActivate)
+Behaviors=(BehaviorName=IsAbilityReady-ParryActivate, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-ParryActivate, NodeType=Action)

; stunstrike 
+Behaviors=(BehaviorName=TryDarkStunstrike, NodeType=Sequence, Child[0]=IsAbilityAvailable-Stunstrike, Child[1]=SelectTargetFor_Stunstrike, Child[2]=SelectAbility-Stunstrike)
+Behaviors=(BehaviorName=SelectTargetFor_Stunstrike, NodeType=Sequence, Child[0]=SetTargetStack-Stunstrike, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-Stunstrike)
+Behaviors=(BehaviorName=IsAbilityAvailable-Stunstrike, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-Stunstrike, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-Stunstrike, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-Stunstrike, NodeType=Condition)

; lightning hands - pistol ability
; you can just use "TryLightningHands" - MOCX has to be installed after all

; reaper
; again, tryreaper - MOCX has to be installed

; these two need a condition to check that a unit's focus is at least two: these should feel like power moves
; ionic storm
; 
+Behaviors=(BehaviorName=TryIonicStorm_prio, NodeType=Sequence, Child[0]=IsAbilityAvailable-IonicStorm, Child[1]=FindPotentialAoETargets-IonicStormProfile_prio, Child[2]=SelectAoETarget-IonicStormProfile_prio, Child[3]=SelectAbility-IonicStorm)
+Behaviors=(BehaviorName=TryIonicStorm_norm, NodeType=Sequence, Child[0]=IsAbilityAvailable-IonicStorm, Child[1]=FindPotentialAoETargets-IonicStormProfile_norm, Child[2]=SelectAoETarget-IonicStormProfile_norm, Child[3]=SelectAbility-IonicStorm)
+Behaviors=(BehaviorName=TryIonicStorm_aggro, NodeType=Sequence, Child[0]=IsAbilityAvailable-IonicStorm, Child[1]=FindPotentialAoETargets-IonicStormProfile_aggro, Child[2]=SelectAoETarget-IonicStormProfile_aggro, Child[3]=SelectAbility-IonicStorm)

+Behaviors=(BehaviorName=FindPotentialAoETargets-IonicStormProfile_prio, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-IonicStormProfile_norm, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-IonicStormProfile_aggro, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-IonicStormProfile_prio, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-IonicStormProfile_norm, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-IonicStormProfile_aggro, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityAvailable-IonicStorm, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-IonicStorm, NodeType=Action)

; ghost 
+Behaviors=(BehaviorName=TryGhost, NodeType=Sequence,  Child[0]=IsAbilityAvailable-Ghost, Child[1]=CheckTemplarFocusLevelMoreThanOne, Child[2]=SelectAbility-Ghost)
+Behaviors=(BehaviorName=IsAbilityAvailable-Ghost, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-Ghost, NodeType=Action)


+Behaviors=(BehaviorName=RM_DarkZealot_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=RM_DarkZealot_RedAbilitySelector)
+Behaviors=(BehaviorName=RM_DarkZealot_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=RM_DarkZealot_RedFirstAction, Child[2]=RM_DarkZealot_RedLastAction)

+Behaviors=(BehaviorName=RM_DarkZealot_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=RM_DarkZealot_RedFirstActionSelector)
+Behaviors=(BehaviorName=RM_DarkZealot_RedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TrySuperDarkAbilities, \\
	Child[1]=TryDarkQuickAbilities, \\
	Child[2]=TryDarkMeleeOrShootOrInvert, \\
	Child[3]=SelectMove_JobOrMelee, \\
	Child[4]=HuntEnemyWithCover, \\
	Child[5]=SkipMove)

+Behaviors=(BehaviorName=RM_DarkZealot_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=RM_DarkZealot_RedLastActionSelector)
+Behaviors=(BehaviorName=RM_DarkZealot_RedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryDarkParry, \\
	Child[1]=TrySuperDarkAbilities, \\
	Child[2]=TryDarkShootOrMeleeOrMoveOption, \\
	Child[3]=HuntEnemyWithCover, \\
	Child[4]=SelectMove_JobOrMelee, \\
	Child[5]=SkipMove)

; 30% chance to try Rend, 20% chance to try standard shot, 25% chance to try volt, 25% chance to move to cover.  Otherwise use whatever is available.
+Behaviors=(BehaviorName=TryDarkShootOrMeleeOrMoveOption, NodeType=RandSelector, Child[0]=TryStandardMelee, Param[0]=30, Child[1]=TryStandaredShot, Param[1]=20, Child[2]=TryDarkVolt, Param[2]=25, Child[3]=MoveStandardWithLoSUnsafe, Param[3]=25 )
+Behaviors=(BehaviorName=TryStandaredShot, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectTargetForStandardShot, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=TryStandaredMelee, NodeType=Sequence, Child[0]=SelectAbility-StandardMelee, Child[1]=MoveDefensiveWithLoSUnsafe )

+Behaviors=(BehaviorName=TryDarkMeleeOrShootOrInvert, NodeType=RandSelector,  Child[0]=TryStandardMelee, Param[0]=50, Child[1]=TryStandaredShot, Param[1]=20, Child[2]=TryMarkTargetOption, Param[2]=30 )

+Behaviors=(BehaviorName=TrySuperDarkAbilities, NodeType=RandSelector, Child[0]=TryIonicStorm, Param[0]=25, Child[1]=TryGhost, Param[1]=50, Child[2]=TryReaper, Param[2]=25)
+Behaviors=(BehaviorName=TryDarkQuickAbilities, NodeType=RandSelector, Child[0]=TryLightningHands, Param[0]=50, Child[1]=TryDarkStunStrike, Param[1]=50)


; ++ Merging ionic storm abilities
+Behaviors=(BehaviorName=TryIonicStorm, NodeType=Selector, Child[0]=TryIonicStorm_prio, Child[1]=TryIonicStorm_norm, Child[2]=TryIonicStorm_aggro) 
