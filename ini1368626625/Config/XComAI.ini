[XComGame.X2AIBTBehaviorTree]
+EquivalentAbilities=( KeyName=MarkTarget, EquivalentAbilityName[0]=TemplarInvert )

; --- don't shoot if you're not an alien
; --- basically since non alien units don't really obey the objective target limits, never let them target the objective in the first place
-Behaviors=(BehaviorName=TryAttackPriorityTarget, NodeType=Sequence, Child[0]=HasPriorityTarget, Child[1]=AttackPriorityTarget)
+Behaviors=(BehaviorName=TryAttackPriorityTarget, NodeType=Sequence, Child[0]=IsTeam-eTeam_Alien, Child[1]=HasPriorityTarget, Child[2]=AttackPriorityTarget)

+EquivalentAbilities=( KeyName=StandardMelee, EquivalentAbilityName[0]=Rend)

+CustomNodes=(NodeTypeString="CultistCondition", ExtendsFromType="Condition", ClassName="CultofJeriah.X2AIBTCondition_NoObjectiveBehavior")
+Behaviors=(BehaviorName=IsObjectiveUnitOrAnObject, NodeType=CultistCondition)
+Behaviors=(BehaviorName=IsNotObjectiveUnitOrAnObject, NodeType=Inverter, Child[0]=IsObjectiveUnitOrAnObject)


;new shoot or reload or overwatch to avoid targeting civilians
+Behaviors=(BehaviorName=TryShootOrReloadOrOverwatch_Cult, NodeType=Selector, Child[0]=ConsiderTakingOverwatch, Child[1]=ShootIfAvailable_Cult, Child[2]=NeedsReload)
+Behaviors=(BehaviorName=ShootIfAvailable_Cult, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectTargetForStandardShot_Cult, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectTargetForStandardShot_Cult, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=GenericSelectBestTarget_Cult, Child[2]=HasValidTarget-StandardShot)

+Behaviors=(BehaviorName=GenericSelectBestTarget_Cult, NodeType=RepeatUntilFail, Child[0]=GenericEvaluateTarget_Cult)
+Behaviors=(BehaviorName=GenericEvaluateTarget_Cult, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=GenericTargetEvaluations_Cult, Child[2]=UpdateBestTarget);
+Behaviors=(BehaviorName=GenericTargetEvaluations_Cult, NodeType=Sequence, Child[0]=TargetScoreHitChance, Child[1]=TargetScoreHealth, Child[2]=TargetScoreFlanking, Child[3]=TargetScoreMarked, Child[4]=ApplyDifficultyModifiers, Child[5]=TargetScoreInvalidateCivilians, Child[6]=IsNotObjectiveUnitOrAnObject, Child[7]=AvoidBoundAndPanickedTargets)

;usage
+Behaviors=(BehaviorName=TryParry, NodeType=Sequence, Child[0]=IsAbilityReady-ParryActivate, Child[1]=SelectAbility-ParryActivate)
+Behaviors=(BehaviorName=IsAbilityReady-ParryActivate, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-ParryActivate, NodeType=Action)

+Behaviors=(BehaviorName=HasValidTarget-Rend, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-Rend, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityAvailable-Rend, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-Rend, NodeType=Action)

+Behaviors=(BehaviorName=TryRend, NodeType=Sequence, Child[0]=IsAbilityAvailable-Rend, Child[1]=RendStepSelector)
+Behaviors=(BehaviorName=RendStepSelector, NodeType=Selector, Child[0]=RendAttack, Child[1]=MoveMeleeIfFirstAbilityFANATIC)
+Behaviors=(BehaviorName=RendAttack, NodeType=Sequence, Child[0]=SelectTargetForRend, Child[1]=SelectAbility-Rend)

; targeting
+Behaviors=(BehaviorName=SelectTargetForRend, NodeType=Sequence, Child[0]=SetTargetStack-Rend, Child[1]=SelectBestTargetForRend, Child[2]=HasValidTarget-Rend)
+Behaviors=(BehaviorName=SelectBestTargetForRend, NodeType=RepeatUntilFail, Child[0]=TargetSelectIterationForRend)
+Behaviors=(BehaviorName=TargetSelectIterationForRend, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=EvaluateTargetForRend, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=EvaluateTargetForRend, NodeType=Sequence, Child[0]=TargetScoreHitChance, Child[1]=TargetScoreHealth, Child[2]=TargetScoreMarked, Child[3]=AvoidBoundAndPanickedTargets, Child[4]=TargetScoreInvalidateCivilians, Child[5]=IsNotObjectiveUnitOrAnObject, Child[6]=SSTeamSpecificModifiers)



+Behaviors=(BehaviorName="CultFanaticRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=CultFanatic_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=CultFanatic_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=CultFanatic_RedAbilitySelector)
+Behaviors=(BehaviorName=CultFanatic_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=CultFanaticRedFirstAction, Child[2]=CultFanaticRedLastAction)

+Behaviors=(BehaviorName=CultFanaticRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=CultFanaticRedFirstActionSelector)
+Behaviors=(BehaviorName=CultFanaticRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=TryMoveThenGrenadeAny, \\
	Child[2]=TryShootOrReloadOrOverwatch_Cult, \\
	Child[3]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=CultFanaticRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=CultFanaticRedLastActionSelector)
+Behaviors=(BehaviorName=CultFanaticRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryGrenadeAny, \\
	Child[1]=TryShootOrReloadOrOverwatch_Cult, \\
	Child[2]=HuntEnemyWithCover, \\
	Child[3]=SelectMove_JobOrAggressive)


+Behaviors=(BehaviorName="CultNecroRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=CultNecro_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=CultNecro_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=CultNecro_RedAbilitySelector)
+Behaviors=(BehaviorName=CultNecro_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=CultNecroRedFirstAction, Child[2]=CultNecroRedLastAction)

+Behaviors=(BehaviorName=CultNecroRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=CultNecroRedFirstActionSelector)
+Behaviors=(BehaviorName=CultNecroRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=TryMoveThenGrenadeAny, \\
	Child[2]=TryShootOrReloadOrOverwatch, \\
	Child[3]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=CultNecroRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=CultNecroRedLastActionSelector)
+Behaviors=(BehaviorName=CultNecroRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryGrenadeAny, \\
	Child[1]=TryShootOrReloadOrOverwatch, \\
	Child[2]=HuntEnemyWithCover, \\
	Child[3]=SelectMove_JobOrAggressive)


+Behaviors=(BehaviorName="CultPaladinRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=CultPaladin_RedAlert, Child[3]=GenericAlertHandler)

+Behaviors=(BehaviorName=CultPaladin_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=CultPaladin_RedAbilitySelector)
+Behaviors=(BehaviorName=CultPaladin_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=CultPaladinRedFirstAction, Child[2]=CultPaladinRedLastAction)

+Behaviors=(BehaviorName=CultPaladinRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=CultPaladinRedFirstActionSelector)
; Update - removed stand-alone MoveAggressive since it should be linked with the desired ability to be used.

+Behaviors=(BehaviorName=CultPaladinRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryParry, \\
	Child[1]=TryMarkTargetOption,\\
	Child[2]=DoIfFlankedMove, \\
	Child[3]=TryRendOrVolt, \\
	Child[4]=SelectMoveProfileByJob, \\
	Child[5]=TryShootOrReloadOrOverwatch_Cult, \\
	Child[6]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=CultPaladinRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=CultPaladinRedLastActionSelector)
+Behaviors=(BehaviorName=CultPaladinRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryParry, \\
	Child[1]=TryParry, \\
	Child[2]=TryRend, \\
	Child[3]=TryShootOrReloadOrOverwatch_Cult, \\
	Child[4]=HuntEnemyWithCover, \\
	Child[5]=SelectMove_JobOrAggressive) 

+Behaviors=(BehaviorName=TryRendOrVolt, NodeType=RandSelector, Child[0]=TryRend, Param[0]=75, Child[1]=TryVolt, Param[1]=25)

;Volt
+Behaviors=(BehaviorName=TryVolt, NodeType=Sequence, Child[0]=IsAbilityAvailable-Volt, Child[1]=SelectTargetForVolt, Child[2]=SelectAbility-Volt) 
+Behaviors=(BehaviorName=IsAbilityAvailable-Volt, NodeType=Condition)
+Behaviors=(BehaviorName=SelectTargetForVolt, NodeType=Sequence, Child[0]=SetTargetStack-Volt, Child[1]=IterateTargetsForVolt, Child[2]=HasValidTarget-Volt)
+Behaviors=(BehaviorName=SetTargetStack-Volt, NodeType=Action)
+Behaviors=(BehaviorName=IterateTargetsForVolt, NodeType=RepeatUntilFail, Child[0]=IterateNextTargetForVolt)
+Behaviors=(BehaviorName=IterateNextTargetForVolt, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSEvaluateForVolt, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSEvaluateForVolt, NodeType=Successor, Child[0]=EvaluateForVolt)
+Behaviors=(BehaviorName=EvaluateForVolt, NodeType=Sequence, Child[0]=TargetIsNotCivilian, Child[1]=TargetNotTeamTheLost, Child[2]=TargetIsEnemy, Child[3]=TargetIsNotEnemyVIP, Child[4]=TargetNotBoundOrPanicked, Child[5]=TargetIsAttackable, Child[6]=IsNotObjectiveUnitOrAnObject, Child[7]=TargetScoreByScaledDistance-1, Child[8]=AddToTargetScore_100, Child[9]=AddSmallRandomTargetScore)
+Behaviors=(BehaviorName=TargetIsAttackable, NodeType=Inverter, Child[0]=TargetIsNotAttackable)
+Behaviors=(BehaviorName=HasValidTarget-Volt, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-Volt, NodeType=Action)
+Behaviors=(BehaviorName=TargetNotTeamTheLost, NodeType=Inverter, Child[0]=IsTargetTeam-eTeam_TheLost)
