;;;;;;;;;;; BEHAVIOR TREE MODIFICATIONS ;;;;;;;;;;;;;;;;;;
[WOTC_AlienPack.UIScreenListener_Shell_LWAlienPack]
; "ScamperRoot_Naja" - naja scamper uses snipermove
+NewBehaviors=(BehaviorName=ScamperRoot_Naja, NodeType=Selector, Child[0]=CounterBeaglerushManeuver, Child[1]=BD_SniperDefense, Child[2]=SniperMove, Child[3]=MoveStandardWithLoSUnsafe, Child[4]=MoveStandardUnsafe, Child[5]=MoveStandardWithLoSUnsafeIgnoreHazards, Child[6]=MoveStandardUnsafeIgnoreHazards, Child[7]=SkipMove)

; Check critical opportunities first before mark target for last action - add reinforcement behaviours for compat with Advent Reinforcements mod
+BehaviorRemovals="AdvCaptain_RedFirstActionSelector"
+Behaviors=(BehaviorName=AdvCaptain_RedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=TryMarkTargetOption, \\
	Child[2]=TryCallReinforcements, \\
	Child[3]=SelectMove_JobOrDefensive, \\
	Child[4]=AdvCaptainTryMoveThenGrenade, \\
	Child[5]=TryShootOrReloadOrOverwatch, \\
	Child[6]=HuntEnemyWithCover)

+BehaviorRemovals="AdvCaptain_RedLastActionSelector"
+NewBehaviors=(BehaviorName=AdvCaptain_RedLastActionSelector, NodeType=Selector, \\
	Child[0]=AdvCaptainTryGrenade, \\
	Child[1]=TryHighPriorityShot, \\
	Child[2]=TryMarkTargetOption, \\
	Child[3]=TryCallReinforcements, \\
	Child[4]=TryShootOrReloadOrOverwatch, \\
	Child[5]=HuntEnemyWithCover, \\
	Child[6]=SelectMove_JobOrDefensive)

+Behaviors=(BehaviorName=TryCallReinforcements, NodeType=Sequence, \\
	Child[0]=IsAbilityAvailable-AdventCommander_CallReinforcements, \\
	Child[1]=ReinforcementsAlliesAndEnemiesCheck, \\
	Child[2]=SelectAbility-AdventCommander_CallReinforcements)

+Behaviors=(BehaviorName=IsAbilityAvailable-AdventCommander_CallReinforcements, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-AdventCommander_CallReinforcements, NodeType=Action)

[XComGame.XComGameState_AIGroup]
+FallbackExclusionList="ChryssalidSoldier"

[XComGame.XGAIBehavior]
; AOE profiles are needed for the AI to perform any targeting with an AoE ability
; Fix for poison spit targetting lost
-AoEProfiles=( Profile=PoisonSpitProfile, Ability=PoisonSpit, bIgnoreSelfDamage=1)
-AoEProfiles=( Profile=PoisonSpitSingleProfile, Ability=PoisonSpit, bIgnoreSelfDamage=1, MinTargets=1)
+AoEProfiles=( Profile=PoisonSpitProfile, Ability=PoisonSpit, bIgnoreSelfDamage=1, bTestTargetEffectsApply=true)
+AoEProfiles=( Profile=PoisonSpitSingleProfile, Ability=PoisonSpit, bIgnoreSelfDamage=1, MinTargets=1, bTestTargetEffectsApply=true)
+AoEProfiles=( Profile=BD_PoisonSpitPrioProfile, Ability=BD_PoisonSpit, bIgnoreSelfDamage=1, MinTargets=3, bTestTargetEffectsApply=true)
+AoEProfiles=( Profile=BD_PoisonSpitProfile, Ability=BD_PoisonSpit, bIgnoreSelfDamage=1, bTestTargetEffectsApply=true)
+AoEProfiles=( Profile=BD_PoisonSpitSingleProfile, Ability=BD_PoisonSpit, bIgnoreSelfDamage=1, MinTargets=1, bTestTargetEffectsApply=true)
+AoEProfiles=( Profile=RocketLauncherProfile, Ability=BD_RocketLauncher, bUsePrecomputePath=1, bFailOnFriendlyFire=1, bRequireLoS=1)
+AoEProfiles=( Profile=RocketLauncherSingleProfile, Ability=BD_RocketLauncher, bUsePrecomputePath=1, bFailOnFriendlyFire=1, MinTargets=1, bRequireLoS=1)
+AoEProfiles=( Profile=RocketLauncherAggressiveProfile, Ability=BD_RocketLauncher, bUsePrecomputePath=1, bRequireLoS=1)
+AoEProfiles=( Profile=GrenadeLauncherProfile, Ability=LaunchGrenade, bUsePrecomputePath=1, bFailOnFriendlyFire=1, bRequireLoS=1)
+AoEProfiles=( Profile=GrenadeLauncherSingleProfile, Ability=LaunchGrenade, bUsePrecomputePath=1, bFailOnFriendlyFire=1, MinTargets=1, bRequireLoS=1)
+AoEProfiles=( Profile=BD_MassReanimation_LWManyProfile, Ability=BD_MassReanimation_LW, bTargetEnemy=0, bTargetCivilians=0, bTargetCorpses=1, bFailOnObjectiveFire=0, bFailOnFriendlyFire=0, MinTargets=4, bRequireLoS=1)
+AoEProfiles=( Profile=BD_MassReanimation_LWFewProfile, Ability=BD_MassReanimation_LW, bTargetEnemy=0, bTargetCivilians=0, bTargetCorpses=1, bFailOnObjectiveFire=0, bFailOnFriendlyFire=0, MinTargets=2, bRequireLoS=1)
+AoEProfiles=( Profile=BD_MassMindSpin_LWManyProfile, Ability=BD_MassMindSpin_LW, bFailOnObjectiveFire=0, bFailOnFriendlyFire=0, MinTargets=3, bRequireLoS=1)
+AoEProfiles=( Profile=BD_MassMindSpin_LWFewProfile, Ability=BD_MassMindSpin_LW, bFailOnObjectiveFire=0, bFailOnFriendlyFire=0, MinTargets=1, bRequireLoS=1)
+AoEProfiles=( Profile=StandalonePinionsBasicProfile, Ability=StandalonePinionsStage1, bRequiresOutdoor=1)
+AoEProfiles=( Profile=StandalonePinionsProfile, Ability=StandalonePinionsStage1, MinTargets=3, bFailOnObjectiveFire=False)

; ***                                           MOVEMENT PROFILES                                                   ***
; defensive SniperMove profile, seeks 15-18 tile distance with safe visibility if no target
+m_arrMoveWeightProfile=(Profile=SniperMove, fCoverWeight=0.0f, fDistanceWeight=1.0f, fFlankingWeight=0.0f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=0.5, fAllyVisWeight=0.4f, fCloseModifier=0.2f, fFarModifier=2.4f)
; fallback lower cover deweights cover in favor of distance, allowing selection of partial cover (if in full cover now) if it is further away
+m_arrMoveWeightProfile=(Profile=FallbackLowerCover, fCoverWeight=0.02f, fDistanceWeight=-10.0f, fFlankingWeight=0.0f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=2.0, fAllyVisWeight=1.0f, fCloseModifier=0.9f, fFarModifier=1.1f)

+m_arrMoveWeightProfile=(Profile=MWP_GrappleAway, fCoverWeight=2.0f, fDistanceWeight=2.0f, fFlankingWeight=1.0f, fEnemyVisWeight=0.1f, fEnemyVisWeightPeak1=1.0f, fAllyVisWeight=0, fHeightWeight=1.5f, fCloseModifier=1.0f, fFarModifier=1.0f)

[XComGame.X2AIBTBehaviorTree]
+Behaviors=(BehaviorName=TargetAffectedByEffect-SimulatedCover, NodeType=Condition)
+Behaviors=(BehaviorName=TargetHasNoShield, NodeType=Inverter, Child[0]=TargetAffectedByEffect-SimulatedCover)
+Behaviors=(BehaviorName=IsFlankingTargetWithoutShield, NodeType=Sequence, Child[0]=TargetHasNoShield, Child[1]=IsFlankingTarget)

; -------------------- Falling Back Entity -----------------------------------------
+Behaviors=(BehaviorName=FallBackRoot, NodeType=Selector, Child[0]=FallBack, Child[1]=FallBackWithLoSUnsafe, Child[2]=MoveDefensiveUnsafe, Child[3]=DoCower, Child[4]=SkipMove)

; Flush and Roust perks
+Behaviors=(BehaviorName=FlushRoot, NodeType=Selector, Child[0]=FallBackUnsafe, Child[1]=FallBackLowerCoverUnsafe, Child[2]=MoveRandomUnsafe)

+Behaviors=(BehaviorName=FallBackLowerCoverUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=FindBestFallbackLowerCoverDestination, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindBestFallbackLowerCoverDestination, NodeType=Selector, Child[0]=FindDestination-FallBackLowerCover)
+Behaviors=(BehaviorName=FindDestination-FallBackLowerCover, NodeType=Action)

;Check for sniper fire, if the check passes, then continue forward with the scoring and action selector
+Behaviors=(BehaviorName=BD_SniperDefense, NodeType=Sequence, Child[0]=SetAlertDataStack, child[1]=BD_SD_SelectBestAlert, Child[2]=HasValidAlertDataLocation, Child[3]=BD_SD_AbilitySelector)
+Behaviors=(BehaviorName=BD_SD_SelectBestAlert, NodeType=RepeatUntilFail, Child[0]=BD_SD_EvaluateAlertData)
+Behaviors=(BehaviorName=BD_SD_EvaluateAlertData, NodeType=Sequence, Child[0]=SetNextAlertData, Child[1]=BD_SD_ScoreAlertData, Child[2]=UpdateBestAlertData)

;only sniper alerts are scored, give them a base score and adjust for distance and age in case there are more than 1
+Behaviors=(BehaviorName=BD_SD_ScoreAlertData, NodeType=Sequence, Child[0]=BD_ScoreSniperFire, Child[1]=SSScoreInvalidAlertData, Child[2]=BD_SD_ScoreAlertDataAge, Child[3]=BD_SD_ScoreAlertDataDistance)
+Behaviors=(BehaviorName=BD_ScoreSniperFire, NodeType=Selector, Child[0]=BD_IfSniperFire, Child[1]=AddToAlertDataScore_100)
;If the alert is took damage or taking fire, is over 24 tiles away, and the damagee has no visible enemies, and not absolute or former absolute, then this is concealed sniper fire against the enemy
+Behaviors=(BehaviorName=BD_IfSniperFire, NodeType=Sequence, Child[0]=NoVisibleEnemies, Child[1]=BD_IsAlertDataReallyScary, Child[2]=IsAlertDataThreeMoves, Child[3]=BD_IfAlertIsNotSpottedTarget, Child[4]=AddToAlertDataScore_40)
+Behaviors=(BehaviorName=BD_IsAlertDataReallyScary, NodeType=Selector, Child[0]=AlertDataIsType-TakingFire, Child[1]=AlertDataIsType-TookDamage)
;continue only if there are no former or absolute knowledge alerts for this unit
+Behaviors=(BehaviorName=BD_IfAlertIsNotSpottedTarget, NodeType=Sequence, Child[0]=BD_AlertDataIsNotAbsoluteKnowledge, Child[1]=BD_AlertDataIsNotFormerKnowledge)
+Behaviors=(BehaviorName=BD_AlertDataIsNotAbsoluteKnowledge, NodeType=Inverter, Child[0]=AlertDataIsAbsoluteKnowledge)
+Behaviors=(BehaviorName=BD_AlertDataIsNotFormerKnowledge, NodeType=Inverter, Child[0]=AlertDataWasEnemyThere)

;This reduces the score to the alert by oldest
+Behaviors=(BehaviorName=BD_SD_ScoreAlertDataAge, NodeType=Selector, Child[0]=IfAlertDataOld, Child[1]=BD_SD_IfAlertDataStale, Child[2]=IfAlertDataRecent, Child[3]=IfAlertDataFresh, Child[4]=AddToAlertDataScore_0)
+Behaviors=(BehaviorName=BD_SD_IfAlertDataStale, NodeType=Sequence, Child[0]=IsAlertDataStale, Child[1]=AddToAlertDataScore_-15)

;This reduces the score to the alert by distance
+Behaviors=(BehaviorName=BD_SD_ScoreAlertDataDistance, NodeType=Selector, Child[0]=BD_SD_IfAlertDataFar, Child[1]=BD_SD_IfAlertDataThreeMoves, Child[2]=BD_SD_IfAlertDataTwoMoves, Child[3]=AddToAlertDataScore_0)
+Behaviors=(BehaviorName=BD_SD_IfAlertDataTwoMoves, NodeType=Sequence, Child[0]=IsAlertDataTwoMoves, Child[1]=AddToAlertDataScore_-5)
+Behaviors=(BehaviorName=BD_SD_IfAlertDataThreeMoves, NodeType=Sequence, Child[0]=IsAlertDataThreeMoves, Child[1]=AddToAlertDataScore_-10)
+Behaviors=(BehaviorName=BD_SD_IfAlertDataFar, NodeType=Sequence, Child[0]=IsAlertDataFar, Child[1]=AddToAlertDataScore_-15)

;Abilities to use, right now it is move forward with cover towards the alert
+Behaviors=(BehaviorName=BD_SD_AbilitySelector, NodeType=Selector, child[0]=BD_SD_FirstAction, child[1]=BD_SD_LastAction)
+Behaviors=(BehaviorName=BD_SD_FirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=BD_SD_FirstActionSelector)
+Behaviors=(BehaviorName=BD_SD_LastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=BD_SD_LastActionSelector)
+Behaviors=(BehaviorName=BD_SD_FirstActionSelector, NodeType=Selector, child[0]=MoveToAlertIfNotVisible)   
+Behaviors=(BehaviorName=BD_SD_LastActionSelector, NodeType=Selector, Child[0]=MoveToAlertIfNotVisible) 

; ---------------- AoE Targeting thingies -------------------------------------
+Behaviors=(BehaviorName=FindPotentialAoETargets-RocketLauncherProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-RocketLauncherSingleProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-RocketLauncherAggressiveProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-GrenadeLauncherProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-GrenadeLauncherSingleProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-BD_MassReanimation_LWManyProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-BD_MassReanimation_LWFewProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-BD_MassMindSpin_LWManyProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-BD_MassMindSpin_LWFewProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-StandalonePinionsBasicProfile, NodeType=Action)

+Behaviors=(BehaviorName=SelectAoETarget-RocketLauncherProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-RocketLauncherSingleProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-RocketLauncherAggressiveProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-GrenadeLauncherProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-GrenadeLauncherSingleProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-BD_MassReanimation_LWManyProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-BD_MassReanimation_LWFewProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-BD_MassMindSpin_LWManyProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-BD_MassMindSpin_LWFewProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-StandalonePinionsBasicProfile, NodeType=Action)

; -------------- High priority target shooting (shoot if kill or target flanked/exposed) -------------
+Behaviors=(BehaviorName=TryHighPriorityShot, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=HaveHighPriorityTarget, Child[2]=ShootIfAvailable)
+Behaviors=(BehaviorName=HaveHighPriorityTarget, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=FindHighPriorityTarget, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=FindHighPriorityTarget, NodeType=RepeatUntilFail, Child[0]=NotHighPriorityEvaluateTarget)
+Behaviors=(BehaviorName=NotHighPriorityEvaluateTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetIsNotHighPriority)
+Behaviors=(BehaviorName=TargetIsNotHighPriority, NodeType=Inverter, Child[0]=TargetIsHighPriority)
+Behaviors=(BehaviorName=TargetIsHighPriority, NodeType=Sequence, Child[0]=TargetIsNotCivilian, Child[1]=TargetIsNotLost, Child[2]=TargetKillableOrFlanked, Child[3]=AddToTargetScore_1000, Child[4]=UpdateBestTarget)
+Behaviors=(BehaviorName=TargetKillableOrFlanked, NodeType=Selector, Child[0]=TargetIsKillable,  Child[1]=IsFlankingTargetWithoutShield)

; -------------- High priority target shooting (LEU Version) (shoot if kill or target flanked/exposed) -------------
+Behaviors=(BehaviorName=TryHighPriorityLEU, NodeType=Sequence, Child[0]=IsAbilityAvailable-BD_LightEmUp_LW, Child[1]=HaveHighPriorityLEUTarget, Child[2]=LEUIfAvailable)
+Behaviors=(BehaviorName=HaveHighPriorityLEUTarget, NodeType=Sequence, Child[0]=SetTargetStack-BD_LightEmUp_LW, Child[1]=FindHighPriorityTarget, Child[2]=HasValidTarget-BD_LightEmUp_LW)

; -------------- Killshot target shooting (shoot if kill) -------------
+Behaviors=(BehaviorName=TryKillShot, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=HaveKillShotTarget, Child[2]=ShootIfAvailable)
+Behaviors=(BehaviorName=HaveKillShotTarget, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=FindKillShotTarget)
+Behaviors=(BehaviorName=FindKillShotTarget, NodeType=RepeatUntilFail, Child[0]=NotKillShotEvaluateTarget)
+Behaviors=(BehaviorName=NotKillShotEvaluateTarget, NodeType=Inverter, Child[0]=KillShotEvaluateTarget)
+Behaviors=(BehaviorName=KillShotEvaluateTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetIsKillShot)
+Behaviors=(BehaviorName=TargetIsKillShot, NodeType=Sequence, Child[0]=TargetIsKillable)

; ---------------- BD_LightEmUp_LW (MutonM3_LW, Elite) --------------------------------------------
+Behaviors=(BehaviorName=IsAbilityAvailable-BD_LightEmUp_LW, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-BD_LightEmUp_LW, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-BD_LightEmUp_LW, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-BD_LightEmUp_LW, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-BD_LightEmUp_LW, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-BD_LightEmUp_LW, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToPotentialTargetRange-BD_LightEmUp_LW, NodeType=Action)

; ---------------- RedAlert Fallback actions for various types --------------------------------------------
; Note: These nodes use the bare 'RandOverwatchXX' that only test if the overwatch ability is active, it does no scoring
; based on to-hit chances (which will often fail the node entirely if the unit can see no enemies or the standard shot action
; is disabled for some reason). This is important to get AI to overwatch when they have nothing else to do.
+Behaviors=(BehaviorName=AdventRedFallbackAction, NodeType=Selector, Child[0]=RandOverwatch75, Child[1]=DoCower, Child[2]=SkipMove)
+Behaviors=(BehaviorName=MECRedFallbackAction, NodeType=Selector, Child[0]=RandOverwatch75, Child[1]=SkipMove)
+Behaviors=(BehaviorName=AlienRedFallbackAction, NodeType=Selector, Child[0]=RandOverwatch75, Child[1]=SkipMove)

; ---------------- AI Fixes for Vipers-----------------------------------------------------------
-Behaviors=(BehaviorName=IsInvalidTonguePullTarget, NodeType=Selector, Child[0]=TargetAffectedByEffect-Suppression, Child[1]=TargetIsApplyingEffect-Suppression);
-Behaviors=(BehaviorName=IsInvalidTonguePullTarget, NodeType=Selector, Child[0]=TargetAffectedByEffect-Suppression, Child[1]=TargetIsApplyingEffect-Suppression, Child[2]=TargetAffectedByEffect-DLC_3SacrificeShield);
-Behaviors=(BehaviorName=IsInvalidTonguePullTarget, NodeType=Selector, Child[0]=TargetAffectedByEffect-Suppression, Child[1]=TargetIsApplyingEffect-Suppression, Child[2]=IsTargetTeam-eTeam_TheLost)
+Behaviors=(BehaviorName=IsInvalidTonguePullTarget, NodeType=Selector, Child[0]=TargetAffectedByEffect-Suppression, Child[1]=TargetIsApplyingEffect-Suppression, Child[2]=IsTargetTeam-eTeam_TheLost);
+Behaviors=(BehaviorName=TryLWViperShootOrReloadOrOverwatch, NodeType=Selector, Child[0]=ShootIfAvailable, Child[1]=ConsiderTakingOverwatch,  Child[2]=NeedsReload)
+Behaviors=(BehaviorName=TryLWViperMoveOrShoot, NodeType=RandSelector, Child[0]=MoveFlanking, Param[0]=60, Child[1]=TryLWViperShootOrReloadOrOverwatch, Param[1]=40)

; ----------------------------------------------------------------------------------------------------------
; -------------------- MutonM2_LW (Centurion) --------------------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; "Select Attack if Ideal" includes grenade and melee attack if already in position
+Behaviors=(BehaviorName="LWMutonM2::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=MutonM2_LWRedAlert, Child[3]=GenericAlertHandler)

+Behaviors=(BehaviorName=MutonM2_LWRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=MutonM2_LWRedAbilitySelector)
+Behaviors=(BehaviorName=MutonM2_LWRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=MutonM2_LWRedFirstAction, Child[2]=MutonM2_LWRedLastAction, Child[3]=AlienRedFallbackAction)

+Behaviors=(BehaviorName=MutonM2_LWRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=MutonM2_LWRedFirstActionSelector)
+Behaviors=(BehaviorName=MutonM2_LWRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryBayonetKill, \\
	Child[1]=TryBD_WarCry_LWOnMultipleTargets, \\
	Child[2]=TryBayonet, \\
	Child[3]=TryMoveForGrenade, \\
	Child[4]=TryBD_Bayonetcharge_LW, \\
	Child[5]=TryMoveToSuppressClosest, \\
	Child[6]=TryTwoTurnAttackSupportIfSafe, \\
	Child[7]=NeedsReload, \\
	Child[8]=SelectMoveProfileByJob, \\
	Child[9]=TryShootOrReloadOrOverwatch, \\
	Child[10]=TryBD_WarCry_LWOnFewTargets, \\
	Child[11]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=MutonM2_LWRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=MutonM2_LWRedLastActionSelector)
+Behaviors=(BehaviorName=MutonM2_LWRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryBayonet, \\
	Child[1]=TryHighPriorityShot, \\
	Child[2]=TryGrenade, \\
	Child[3]=TrySuppressClosest, \\
	Child[4]=TryShootOrReloadOrOverwatch, \\
	Child[5]=HuntEnemyWithCover, \\
	Child[6]=SelectMove_JobOrAggressive)

; ---------------- BayonetKill (MutonM2_LW, Centurion) --------------------------------------------

+Behaviors=(BehaviorName=TryBayonetKill, NodeType=Sequence, Child[0]=IsAbilityReady-Bayonet, Child[1]=TargetIsKillable, Child[2]=BayonetStepSelector)

; ---------------- BD_Bayonetcharge_LW (MutonM2_LW, Centurion) --------------------------------------------
+Behaviors=(BehaviorName=HasValidTarget-BD_Bayonetcharge_LW, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-BD_Bayonetcharge_LW, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityReady-BD_Bayonetcharge_LW, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-BD_Bayonetcharge_LW, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-BD_Bayonetcharge_LW, NodeType=Action)
+Behaviors=(BehaviorName=EnoughAlliesVisible, NodeType=StatCondition, Param[0]=VisibleAllyCount, Param[1]=">", Param[2]=3)

; usage
+Behaviors=(BehaviorName=TryBD_Bayonetcharge_LW, NodeType=Sequence, Child[0]=IsAbilityReady-BD_Bayonetcharge_LW, Child[1]=BD_Bayonetcharge_LWConditions, Child[2]=BD_Bayonetcharge_LWStepSelector)
+Behaviors=(BehaviorName=BD_Bayonetcharge_LWConditions, NodeType=Selector, Child[0]=HasLowHP, Child[1]=EnoughAlliesVisible)
+Behaviors=(BehaviorName=BD_Bayonetcharge_LWStepSelector, NodeType=Selector, Child[0]=BD_Bayonetcharge_LWAttack, Child[1]=MoveMeleeDefensiveIfFirstAbility)
+Behaviors=(BehaviorName=BD_Bayonetcharge_LWAttack, NodeType=Sequence, Child[0]=IsAbilityAvailable-BD_Bayonetcharge_LW, Child[1]=SelectTargetForBD_Bayonetcharge_LW, Child[2]=SelectAbility-BD_Bayonetcharge_LW)

; targeting
+Behaviors=(BehaviorName=SelectTargetForBD_Bayonetcharge_LW, NodeType=Sequence, Child[0]=SetTargetStack-BD_Bayonetcharge_LW, Child[1]=SelectBestTargetForStandardMelee, Child[2]=HasValidTarget-BD_Bayonetcharge_LW)
+Behaviors=(BehaviorName=SelectBestTargetForBD_Bayonetcharge_LW, NodeType=RepeatUntilFail, Child[0]=EvaluatePotentialMeleeTarget)

; ---------------- BD_WarCry_LW (MutonM2_LW, Centurion) --------------------------------------------
+Behaviors=(BehaviorName=HasValidTarget-BD_WarCry_LW, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-BD_WarCry_LW, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityReady-BD_WarCry_LW, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-BD_WarCry_LW, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-BD_WarCry_LW, NodeType=Action)
+Behaviors=(BehaviorName=HasMultipleBD_WarCry_LWTargets, NodeType=StatCondition, Param[0]=AbilityTargetUnitCount-BD_WarCry_LW, Param[1]=">=", Param[2]=4)
+Behaviors=(BehaviorName=HasFewBD_WarCry_LWTargets, NodeType=StatCondition, Param[0]=AbilityTargetUnitCount-BD_WarCry_LW, Param[1]=">=", Param[2]=2)
+Behaviors=(BehaviorName=IsTargetInMovementRange-BD_WarCry_LW, NodeType=Condition)

+Behaviors=(BehaviorName=TryBD_WarCry_LWOnMultipleTargets, NodeType=Sequence, Child[0]=IsAbilityAvailable-BD_WarCry_LW, Child[1]=HasMultipleBD_WarCry_LWTargets, Child[2]=SelectAbility-BD_WarCry_LW)
+Behaviors=(BehaviorName=TryBD_WarCry_LWOnFewTargets, NodeType=Sequence, Child[0]=IsAbilityAvailable-BD_WarCry_LW, Child[1]=HasFewBD_WarCry_LWTargets, Child[2]=SelectAbility-BD_WarCry_LW)

+Behaviors=(BehaviorName=SelectPotentialTargetForBD_WarCry_LW, NodeType=Sequence, Child[0]=SetPotentialAllyTargetStack, Child[1]=SelectBestAllyTargetForBD_WarCry_LW, Child[2]=HasValidTarget-Potential)
+Behaviors=(BehaviorName=SelectBestAllyTargetForBD_WarCry_LW, NodeType=RepeatUntilFail, Child[0]=EvaluatePotentialBD_WarCry_LWTarget)
+Behaviors=(BehaviorName=EvaluatePotentialBD_WarCry_LWTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=ScoreBestTargetForBD_WarCry_LW, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=ScoreBestTargetForBD_WarCry_LW, NodeType=Successor, Child[0]=TargetScoreReachableForBD_WarCry_LW)
+Behaviors=(BehaviorName=TargetScoreReachableForBD_WarCry_LW, NodeType=Sequence, Child[0]=IsTargetInMovementRange-BD_WarCry_LW, Child[1]=AvoidBoundAndPanickedTargets, Child[2]=ScoreByHP)
+Behaviors=(BehaviorName=ScoreByHP, NodeType=Sequence, Child[0]=TargetScoreByScaledMaxStat-eStat_HP, Child[1]=TargetScoreByScaledCurrStat-eStat_HP)
+Behaviors=(BehaviorName=TargetScoreByScaledMaxStat-eStat_HP, NodeType=Action, Param[0]=10)
+Behaviors=(BehaviorName=TargetScoreByScaledCurrStat-eStat_HP, NodeType=Action, Param[0]=1)

; ----------------------------------------------------------------------------------------------------------
; -------------------- MutonM3_LW (Elite or "The Bluton") --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; Updated to activate personal shield as priority when available
+Behaviors=(BehaviorName="LWMutonM3::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=MutonM3_LWRedAlert, Child[3]=GenericAlertHandler)

+Behaviors=(BehaviorName=MutonM3_LWRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=MutonM3_LWRedAbilitySelector)
+Behaviors=(BehaviorName=MutonM3_LWRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=MutonM3_LWRedFirstAction, Child[2]=MutonM3_LWRedLastAction, Child[3]=AlienRedFallbackAction)

+Behaviors=(BehaviorName=MutonM3_LWRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=MutonM3_LWRedFirstActionSelector)
+Behaviors=(BehaviorName=MutonM3_LWRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryBD_Personalshield_LW, \\
	Child[1]=TryBayonetKill, \\
	Child[2]=TryBD_WarCry_LWOnMultipleTargets, \\
	Child[3]=TryBayonet, \\
	Child[4]=DoIfFlankedMove, \\
	Child[5]=RandFilterTryLEU, \\
	Child[6]=TryMoveThenGrenade, \\
	Child[7]=TryBD_Bayonetcharge_LW, \\
	Child[8]=NeedsReload, \\
	Child[9]=SelectMoveProfileByJob, \\
	Child[10]=TryLEUOrReload, \\
	Child[11]=TryBD_WarCry_LWOnFewTargets, \\
	Child[12]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=MutonM3_LWRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=MutonM3_LWRedLastActionSelector)
+Behaviors=(BehaviorName=MutonM3_LWRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryBayonet, \\
	Child[1]=TryHighPriorityShot, \\
	Child[2]=TryGrenade, \\
	Child[3]=TrySuppressClosest, \\
	Child[4]=TryLEUOrReloadOrOverwatch, \\
	Child[5]=HuntEnemyWithCover, \\
	Child[6]=SelectMove_JobOrAggressive)

+Behaviors=(BehaviorName=RandFilterTryLEU, NodeType=RandFilter, Child[0]=LEUIfAvailable, Param[0]=60)

+Behaviors=(BehaviorName=TryLEUOrReload, NodeType=Selector, Child[0]=LEUIfAvailable, Child[1]=NeedsReload)
+Behaviors=(BehaviorName=TryLEUOrReloadOrOverwatch, NodeType=Selector, Child[0]=ConsiderTakingOverwatch, Child[1]=LEUIfAvailable, Child[2]=NeedsReload)
+Behaviors=(BehaviorName=LEUIfAvailable, NodeType=Sequence, Child[0]=IsAbilityAvailable-BD_LightEmUp_LW, Child[1]=SelectTargetForLEU, Child[2]=SelectAbility-BD_LightEmUp_LW)
+Behaviors=(BehaviorName=SelectTargetForLEU, NodeType=Sequence, Child[0]=SetTargetStack-BD_LightEmUp_LW, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-BD_LightEmUp_LW)

; ---------------- Personal Shield (MutonM3_LW, Elite) --------------------------------------------
+Behaviors=(BehaviorName=TryBD_Personalshield_LW, NodeType=Sequence, Child[0]=IsAbilityAvailable-BD_Personalshield_LW, Child[1]=SelectAbility-BD_Personalshield_LW)
+Behaviors=(BehaviorName=IsAbilityAvailable-BD_Personalshield_LW, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-BD_Personalshield_LW, NodeType=Action)

; ----------------------------------------------------------------------------------------------------------
; -------------------------------------- ADVENT ROCKETEER --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; Updated to try and shoot rocket launcher as first action (assuming it is move-or-shoot)
+Behaviors=(BehaviorName="LWAdventRocketeer::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=LWAdventRocketeer_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=LWAdventRocketeer_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=LWAdventRocketeer_RedAbilitySelector)
+Behaviors=(BehaviorName=LWAdventRocketeer_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=LWAdventRocketeerRedFirstAction, Child[2]=LWAdventRocketeerRedLastAction, Child[3]=AdventRedFallbackAction)

+Behaviors=(BehaviorName=LWAdventRocketeerRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=LWAdventRocketeerRedFirstActionSelector)
+Behaviors=(BehaviorName=LWAdventRocketeerRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=TryRocketLauncher, \\
	Child[2]=TryRocketLauncherSingle33, \\
	Child[3]=NeedsReload, \\
	Child[4]=SelectMove_JobOrDefensive, \\
	Child[5]=TryMoveThenGrenade, \\
	Child[6]=TryShootOrReloadOrOverwatch, \\
	Child[7]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=LWAdventRocketeerRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=LWAdventRocketeerRedLastActionSelector)
+Behaviors=(BehaviorName=LWAdventRocketeerRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryRocketLauncher, \\
	Child[1]=TryShootOrReloadOrOverwatch, \\
	Child[2]=HuntEnemyWithCover, \\
	Child[3]=SelectMove_JobOrDefensive)

+Behaviors=(BehaviorName=TryRocketLauncher, NodeType=Sequence, Child[0]=IsAbilityAvailable-BD_RocketLauncher, Child[1]=FindPotentialAoETargets-RocketLauncherProfile, Child[2]=SelectAoETarget-RocketLauncherProfile, Child[3]=SelectAbility-BD_RocketLauncher)
+Behaviors=(BehaviorName=IsAbilityAvailable-BD_RocketLauncher, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-BD_RocketLauncher, NodeType=Action)

+Behaviors=(BehaviorName=TryRocketLauncherSingle, NodeType=Sequence, Child[0]=IsAbilityAvailable-BD_RocketLauncher, Child[1]=FindPotentialAoETargets-RocketLauncherSingleProfile, Child[2]=SelectAoETarget-RocketLauncherSingleProfile, Child[3]=SelectAbility-BD_RocketLauncher)
+Behaviors=(BehaviorName=TryRocketLauncherSingle33, NodeType=RandFilter, Child[0]=TryRocketLauncherSingle, Param[0]=33)

; ----------------------------------------------------------------------------------------------------------
; -------------------------------------- ADVENT GRENADIER --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; Updated to allow firing their grenade launcher -- LIMITATION: only works with a single grenade type
+Behaviors=(BehaviorName="LWAdventGrenadier::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=LWAdventGrenadierRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=LWAdventGrenadierRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=LWAdventGrenadier_RedAbilitySelector)
+Behaviors=(BehaviorName=LWAdventGrenadier_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=LWAdventGrenadierRedFirstAction, Child[2]=LWAdventGrenadierRedLastAction, Child[3]=AdventRedFallbackAction)

+Behaviors=(BehaviorName=LWAdventGrenadierRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=LWAdventGrenadierRedFirstActionSelector)
+Behaviors=(BehaviorName=LWAdventGrenadierRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=TryMoveThenGrenadeLauncher, \\
	Child[2]=NeedsReload, \\
	Child[3]=SelectMove_JobOrDefensive, \\
	Child[4]=TryMoveThenGrenadeLauncher, \\
	Child[5]=TryShootOrReloadOrOverwatch, \\
	Child[6]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=LWAdventGrenadierRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=LWAdventGrenadierRedLastActionSelector)
+Behaviors=(BehaviorName=LWAdventGrenadierRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryGrenadeLauncher, \\
	Child[1]=TryHighPriorityShot, \\
	Child[2]=TryGrenadeLauncherSingle33, \\
	Child[3]=TryShootOrReloadOrOverwatch, \\
	Child[4]=TryGrenadeLauncherSingle, \\
	Child[5]=HuntEnemyWithCover, \\
	Child[6]=SelectMove_JobOrDefensive)

+Behaviors=(BehaviorName=TryMoveThenGrenadeLauncher, NodeType=Selector, Child[0]=TryMoveForGrenadeLauncher, Child[1]=TryGrenadeLauncher)
+Behaviors=(BehaviorName=TryMoveForGrenadeLauncher, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-LaunchGrenade, Child[2]=FindPotentialAoETargets-GrenadeLauncherProfile, Child[3]=MoveStandardIfFirstAbility-GrenadeLauncher)

+Behaviors=(BehaviorName=MoveStandardIfFirstAbility-GrenadeLauncher, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=FindGrenadeLauncherDestination, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindGrenadeLauncherDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAbilityRange-LaunchGrenade, Child[2]=RestrictToEnemyLoS, Child[3]=FindRestrictedDestination-MWP_Standard)

+Behaviors=(BehaviorName=TryGrenadeLauncher, NodeType=Sequence, Child[0]=IsAbilityAvailable-LaunchGrenade, Child[1]=FindPotentialAoETargets-GrenadeLauncherProfile, Child[2]=SelectAoETarget-GrenadeLauncherProfile, Child[3]=SelectAbility-LaunchGrenade)
+Behaviors=(BehaviorName=TryGrenadeLauncherSingle, NodeType=Sequence, Child[0]=IsAbilityAvailable-LaunchGrenade, Child[1]=FindPotentialAoETargets-GrenadeLauncherSingleProfile, Child[2]=SelectAoETarget-GrenadeLauncherSingleProfile, Child[3]=SelectAbility-LaunchGrenade)
+Behaviors=(BehaviorName=TryGrenadeLauncherSingle33, NodeType=RandFilter, Child[0]=TryGrenadeLauncherSingle, Param[0]=33)
+Behaviors=(BehaviorName=IsAbilityAvailable-LaunchGrenade, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-LaunchGrenade, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-LaunchGrenade, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-LaunchGrenade, NodeType=Action)

; ----------------------------------------------------------------------------------------------------------
; ---------------------------------------- ADVENT SENTRY ---------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; adding basic high priority target shooting
+Behaviors=(BehaviorName="LWAdventSentry::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=LWAdventSentry_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=LWAdventSentry_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=LWAdventSentry_RedAbilitySelector)
+Behaviors=(BehaviorName=LWAdventSentry_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=LWAdventSentryRedFirstAction, Child[2]=LWAdventSentryRedLastAction, Child[3]=AdventRedFallbackAction)

+Behaviors=(BehaviorName=LWAdventSentryRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=LWAdventSentryRedFirstActionSelector)
+Behaviors=(BehaviorName=LWAdventSentryRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=NeedsReload, \\
	Child[2]=SelectMove_JobOrDefensive, \\
	Child[3]=TryShootOrReloadOrOverwatch, \\
	Child[4]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=LWAdventSentryRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=LWAdventSentryRedLastActionSelector)
+Behaviors=(BehaviorName=LWAdventSentryRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryHighPriorityShot, \\
	Child[1]=TryGrenade, \\
	Child[2]=TryShootOrReloadOrOverwatch, \\
	Child[3]=HuntEnemyWithCover, \\
	Child[4]=SelectMove_JobOrDefensive)

; ----------------------------------------------------------------------------------------------------------
; --------------------------------------- ADVENT GUNNER ----------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; Abilities to handle :
; 'AreaSuppression' -- AOE targeting
; 'LockedOn' -- bonus to shooting at same unit, shouldn't require anything special
; 'BD_TraverseFire_LW' -- shooting doesn't end turn if done as first action -- only on M3, so split into separate root
; 'DangerZone' -- increases suppression area, shouldn't require anything special

+Behaviors=(BehaviorName="LWAdventGunner::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=LWAdventGunnerRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=LWAdventGunnerRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=LWAdventGunner_RedAbilitySelector)
+Behaviors=(BehaviorName=LWAdventGunner_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=LWAdventGunnerRedFirstAction, Child[2]=LWAdventGunnerRedLastAction, Child[3]=LWAdventGunnerRedPostBD_TraverseFire_LWAction, Child[4]=AdventRedFallbackAction)

+Behaviors=(BehaviorName=LWAdventGunnerRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=LWAdventGunnerRedFirstActionSelector)
+Behaviors=(BehaviorName=LWAdventGunnerRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=NeedsReload, \\
	Child[2]=TryHighPriorityShot, \\
	Child[3]=TryMoveOrBD_TraverseFire_LW, \\
	Child[4]=TryMoveThenGrenade, \\
	Child[5]=SelectMove_JobOrDefensive, \\
	Child[6]=ShootOrSuppressIfNoGoodShot, \\
	Child[7]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=LWAdventGunnerRedPostBD_TraverseFire_LWAction, NodeType=Sequence, Child[0]=WasLastAbility-StandardShot, Child[1]=LWAdventGunnerRedLastActionSelector)
+Behaviors=(BehaviorName=LWAdventGunnerRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=LWAdventGunnerRedLastActionSelector)
; Rolls twice for TryAreaSuppression, since "per-ally" check is fixed at 10%
+Behaviors=(BehaviorName=LWAdventGunnerRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryHighPriorityShot, \\
	Child[1]=TryBD_AreaSuppression_LW, \\
	Child[2]=TryBD_AreaSuppression_LW, \\
	Child[3]=TryGrenade, \\
	Child[4]=ShootOrSuppressIfNoGoodShot, \\
	Child[5]=HuntEnemyWithCover, \\
	Child[6]=SelectMove_JobOrDefensive)

+Behaviors=(BehaviorName=TryMoveOrBD_TraverseFire_LW, NodeType=RandSelector, Child[0]=SelectMove_JobOrDefensive, Param[0]=33, Child[1]=TryBD_TraverseFire_LW, Param[1]=67)
+Behaviors=(BehaviorName=TryBD_TraverseFire_LW, NodeType=Sequence, Child[0]=IsAbilityAvailable-BD_TraverseFire_LW, Child[1]=TryShootOrReload)

+Behaviors=(BehaviorName=TryBD_AreaSuppression_LW, NodeType=Sequence, Child[0]=IsAbilityAvailable-BD_AreaSuppression_LW, Child[1]=CheckShouldSuppressVar, Child[2]=SelectTargetForBD_AreaSuppression_LWByAim, Child[3]=SelectAbility-BD_AreaSuppression_LW)
+Behaviors=(BehaviorName=SelectTargetForBD_AreaSuppression_LWByAim, NodeType=Sequence, Child[0]=SetTargetStack-BD_AreaSuppression_LW, Child[1]=SelectBestSuppressionTargetByAim, Child[2]=HasValidTarget-BD_AreaSuppression_LW)

+Behaviors=(BehaviorName=IsAbilityAvailable-BD_TraverseFire_LW, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-BD_AreaSuppression_LW, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-BD_AreaSuppression_LW, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-BD_AreaSuppression_LW, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-BD_AreaSuppression_LW, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-BD_AreaSuppression_LW, NodeType=Action)

; ----------------------------------------------------------------------------------------------------------
; ------------------------------ MEC ARCHER (SUPPORT MEC) --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; Same as ADVENT MEC M2 - shouldn't need any changes for basic behavior
+Behaviors=(BehaviorName="LWAdventMECArcher::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=MECMk2RedAlert, Child[3]=GenericAlertHandler)

; ----------------------------------------------------------------------------------------------------------
; ------------------------------ M2 M3 VIPER --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------

+Behaviors=(BehaviorName="LWViperM2M3::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=ViperM2M3RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=ViperM2M3RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=ViperM2M3RedAbilitySelector)
+Behaviors=(BehaviorName=ViperM2M3RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=ViperM2M3RedFirstAction, Child[2]=ViperM2M3RedLastAction)

+Behaviors=(BehaviorName=ViperM2M3RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=ViperM2M3RedFirstActionSelector)
+Behaviors=(BehaviorName=ViperM2M3RedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryMoveThenBD_PoisonSpitPrio, \\
	Child[1]=ConsiderTonguePullPriorityOrMelee, \\
	Child[2]=TryGetOverHere, \\
	Child[3]=TryMoveThenBD_PoisonSpit, \\
	Child[4]=TryLWViperMoveOrShoot, \\
	Child[5]=TryMoveThenPoisonSpitSingle, \\
	Child[6]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=ViperM2M3RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=ViperM2M3RedLastActionSelector)

+Behaviors=(BehaviorName=ViperM2M3RedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryStandardMelee, \\
	Child[1]=TryBD_PoisonSpitPrio, \\
	Child[2]=TryGetOverHere, \\
	Child[3]=TryLWViperShootOrReloadOrOverwatch, \\
	Child[4]=DoIfFlankedMove, \\
	Child[5]=HuntEnemyWithCover, \\
	Child[6]=MoveDefensive)

;PRIO SPIT ( 3 or more targets)
+Behaviors=(BehaviorName=FindPotentialAoETargets-BD_PoisonSpitPrioProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-BD_PoisonSpitPrioProfile, NodeType=Action)
+Behaviors=(BehaviorName=TryMoveThenBD_PoisonSpitPrio, NodeType=Selector, Child[0]=TryMoveForBD_PoisonSpitPrio, Child[1]=TryBD_PoisonSpitPrio)
+Behaviors=(BehaviorName=TryMoveForBD_PoisonSpitPrio, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-BD_PoisonSpit, Child[2]=FindPotentialAoETargets-BD_PoisonSpitPrioProfile, Child[3]=MoveStandardIfFirstAbility-BD_PoisonSpit)
+Behaviors=(BehaviorName=TryBD_PoisonSpitPrio, NodeType=Sequence, Child[0]=IsAbilityAvailable-BD_PoisonSpit, Child[1]=FindPotentialAoETargets-BD_PoisonSpitPrioProfile, Child[2]=SelectAoETarget-BD_PoisonSpitPrioProfile, Child[3]=SelectAbility-BD_PoisonSpit)

;NORMAL SPIT ( 2 or more targets)
+Behaviors=(BehaviorName=FindPotentialAoETargets-BD_PoisonSpitProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-BD_PoisonSpitProfile, NodeType=Action)
+Behaviors=(BehaviorName=TryMoveThenBD_PoisonSpit, NodeType=Selector, Child[0]=TryMoveForBD_PoisonSpit, Child[1]=TryBD_PoisonSpit)
+Behaviors=(BehaviorName=TryMoveForBD_PoisonSpit, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-BD_PoisonSpit, Child[2]=FindPotentialAoETargets-BD_PoisonSpitProfile, Child[3]=MoveStandardIfFirstAbility-BD_PoisonSpit)
+Behaviors=(BehaviorName=TryBD_PoisonSpit, NodeType=Sequence, Child[0]=IsAbilityAvailable-BD_PoisonSpit, Child[1]=FindPotentialAoETargets-BD_PoisonSpitProfile, Child[2]=SelectAoETarget-BD_PoisonSpitProfile, Child[3]=SelectAbility-BD_PoisonSpit)

;SINGLE SPIT (1 target)
+Behaviors=(BehaviorName=FindPotentialAoETargets-BD_PoisonSpitSingleProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-BD_PoisonSpitSingleProfile, NodeType=Action)
+Behaviors=(BehaviorName=TryMoveThenBD_PoisonSpitSingle, NodeType=Selector, Child[0]=TryMoveForBD_PoisonSpitSingle, Child[1]=TryBD_PoisonSpitSingle)
+Behaviors=(BehaviorName=TryMoveForBD_PoisonSpitSingle, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-BD_PoisonSpit, Child[2]=FindPotentialAoETargets-BD_PoisonSpitSingleProfile, Child[3]=MoveStandardIfFirstAbility-BD_PoisonSpit)
+Behaviors=(BehaviorName=TryBD_PoisonSpitSingle, NodeType=Sequence, Child[0]=IsAbilityAvailable-BD_PoisonSpit, Child[1]=FindPotentialAoETargets-BD_PoisonSpitSingleProfile, Child[2]=SelectAoETarget-BD_PoisonSpitSingleProfile, Child[3]=SelectAbility-BD_PoisonSpit)

+Behaviors=(BehaviorName=MoveStandardIfFirstAbility-BD_PoisonSpit, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=FindPoisonSpitDestination, Child[3]=SelectAbility-StandardMove)

+Behaviors=(BehaviorName=IsAbilityReady-BD_PoisonSpit, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-BD_PoisonSpit, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-BD_PoisonSpit, NodeType=Action)

; ----------------------------------------------------------------------------------------------------------
; ----------------------------------- NAJA (VIPER SNIPER) --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; Same as Viper - updated to account for move-or-fire for sniper rifle
+Behaviors=(BehaviorName="LWNaja::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=LWNajaRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=LWNajaRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=LWNajaRedAbilitySelector)
+Behaviors=(BehaviorName=LWNajaRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=LWNajaRedFirstAction, Child[2]=LWNajaRedLastAction, Child[3]=AlienRedFallbackAction)

+Behaviors=(BehaviorName=LWNajaRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=LWNajaRedFirstActionSelector)
+Behaviors=(BehaviorName=LWNajaRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryBD_PoisonSpit, \\
	Child[1]=TryBD_PoisonSpitSingle, \\
	Child[2]=DoIfFlankedSniperMove, \\
	Child[3]=TryHighPriorityShot, \\
	Child[4]=MoveIfAnyEnemyWithin6Tiles, \\
	Child[5]=SniperShootIfAvailable, \\
	Child[6]=TrySniperShootOrReloadOrOverwatch, \\
	Child[7]=SniperMove)

+Behaviors=(BehaviorName=LWNajaRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=LWNajaRedLastActionSelector)
+Behaviors=(BehaviorName=LWNajaRedLastActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedSniperMove, \\
	Child[1]=MoveIfAnyEnemyWithin6Tiles, \\
	Child[2]=TryHighPriorityShot, \\
	Child[3]=TrySniperShootOrReloadOrOverwatch, \\
	Child[4]=TryBD_PoisonSpit, \\
	Child[5]=TryBD_PoisonSpitSingle, \\
	Child[6]=RestrictedSniperMoveOnly, \\
	Child[7]=HoldGroundIfEnemyVisible, \\
	Child[8]=SniperMove)

+Behaviors=(BehaviorName=TryBDSnipeOrSpit8020_LW, NodeType=RandSelector, Child[0]=SniperShootIfAvailable, Param[0]=80, Child[1]=TryBD_PoisonSpitSingle, Param[1]=20)

+Behaviors=(BehaviorName=DoIfFlankedSniperMove, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=SniperMove)
+Behaviors=(BehaviorName=HoldGroundIfEnemyVisible, NodeType=Sequence, Child[0]=AnyLivingEnemyVisible, Child[1]=SkipMove)
+Behaviors=(BehaviorName=SniperMoveIfEnemyVisible, NodeType=Sequence, Child[0]=AnyLivingEnemyVisible, Child[1]=SniperMove)

+Behaviors=(BehaviorName=RandMoveIfEnemyClose, NodeType=RandFilter, Child[0]=MoveIfAnyEnemyWithin6Tiles, Param[0]=60)

+Behaviors=(BehaviorName=MoveIfAnyEnemyWithin6Tiles, NodeType=Sequence, Child[0]=AnyEnemyWithin6Tiles, Child[1]=SniperMove)
+Behaviors=(BehaviorName=AnyEnemyWithin6Tiles, NodeType=Sequence, Child[0]=SetVisiblePotentialTargetStack, Child[1]=SearchAnyEnemyWithin6Tiles, Child[2]=HasValidTarget-Potential)
+Behaviors=(BehaviorName=SearchAnyEnemyWithin6Tiles, NodeType=RepeatUntilFail, Child[0]=IterateNextTargetForWithin6Tiles)
+Behaviors=(BehaviorName=IterateNextTargetForWithin6Tiles, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSEvaluateForWithin6Tiles, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSEvaluateForWithin6Tiles, NodeType=Successor, Child[0]=EvaluateForWithin6Tiles)
+Behaviors=(BehaviorName=EvaluateForWithin6Tiles, NodeType=Sequence, Child[0]=TargetIsNotCivilian, Child[1]=TargetNotTeamResistance, Child[2]=TargetIsEnemy, Child[3]=TargetIsNotEnemyVIP, Child[4]=TargetNotBoundOrPanicked, Child[5]=TargetIsAttackable, Child[6]=AddToTargetScore_-100, Child[7]=SSScoreTargetIfWithin6Tiles)
+Behaviors=(BehaviorName=SSScoreTargetIfWithin6Tiles, NodeType=Successor, Child[0]=ScoreTargetIfWithin6Tiles)
+Behaviors=(BehaviorName=ScoreTargetIfWithin6Tiles, NodeType=Sequence, Child[0]=TargetDistanceLesserThan6Tiles, Child[1]=AddToTargetScore_300)
+Behaviors=(BehaviorName=TargetDistanceLesserThan6Tiles, NodeType=StatCondition, Param[0]=PotentialTargetDistance, Param[1]="<", Param[2]=9)

+Behaviors=(BehaviorName=TrySniperShootOrReload, NodeType=Selector, Child[0]=SniperShootIfAvailable, Child[1]=NeedsReload)
+Behaviors=(BehaviorName=SniperShootIfAvailable, NodeType=Sequence, Child[0]=IsAbilityAvailable-SniperStandardFire, Child[1]=SelectTargetForSniperShot, Child[2]=SelectAbility-SniperStandardFire)
+Behaviors=(BehaviorName=SelectTargetForSniperShot, NodeType=Sequence, Child[0]=SetTargetStack-SniperStandardFire, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-SniperStandardFire)

+Behaviors=(BehaviorName=TrySniperShootOrReloadOrOverwatch, NodeType=Selector, Child[0]=ConsiderTakingSniperOverwatch, Child[1]=SniperShootIfAvailable, Child[2]=NeedsReload)
+Behaviors=(BehaviorName=ConsiderTakingSniperOverwatch, NodeType=Selector, Child[0]=TryTwoTurnSniperAttackSupport, Child[1]=ConsiderTakingOverwatchAllUnits, Child[2]=ConsiderTakingOverwatchVIP, Child[3]=ConsiderTakingOverwatchEvac)
+Behaviors=(BehaviorName=TryTwoTurnSniperAttackSupport, NodeType=Sequence, Child[0]=HasTwoTurnAttackTargets, Child[1]=TrySniperOverwatchTwoTurnTarget)
+Behaviors=(BehaviorName=TrySniperOverwatchTwoTurnTarget, NodeType=Sequence, Child[0]=IsAbilityAvailable-SniperRifleOverwatch, Child[1]=RandOverwatch100_50)

+Behaviors=(BehaviorName=IsAbilityAvailable-SniperStandardFire, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-SniperStandardFire, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-SniperStandardFire, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-SniperStandardFire, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-SniperStandardFire, NodeType=Action)

+Behaviors=(BehaviorName=IsAbilityAvailable-SniperRifleOverwatch, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-SniperRifleOverwatch, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-SniperRifleOverwatch, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-SniperRifleOverwatch, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-SniperRifleOverwatch, NodeType=Action)

; SNIPER MOVEMENT
+Behaviors=(BehaviorName=FindDestination-SniperMove, NodeType=Action)
+Behaviors=(BehaviorName=FindDestinationWithLoS-SniperMove, NodeType=Action)
+Behaviors=(BehaviorName=FindRestrictedDestination-SniperMove, NodeType=Action)
 
+Behaviors=(BehaviorName=SniperMove, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=SniperMoveUnsafeSelector)
+Behaviors=(BehaviorName=SniperMoveUnsafeSelector, NodeType=Selector, Child[0]=SniperMoveUnsafeDashIfFlanked, Child[1]=SniperMoveUnsafe)
+Behaviors=(BehaviorName=SniperMoveUnsafeDashIfFlanked, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=CheckIfNeedToMove, Child[2]=SniperMoveUnsafeDash)
+Behaviors=(BehaviorName=SniperMoveUnsafeDash, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=RestrictToUnflanked, Child[3]=OverrideIdealRange-21, Child[4]=UseDashMovement, Child[5]=FindBestSniperDestination, Child[6]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=SniperMoveUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=RestrictToUnflanked, Child[3]=OverrideIdealRange-21, Child[4]=FindBestSniperDestination, Child[5]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindBestSniperDestination, NodeType=Selector, Child[0]=FindRestrictedDestination-SniperMove, Child[1]=FindRestrictedDestination-MWP_Defensive, Child[2]=FindDestination-MWP_Defensive)
+Behaviors=(BehaviorName=RestrictedSniperMoveOnly, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=RestrictToUnflanked, Child[3]=OverrideIdealRange-21, Child[4]=FindRestrictedDestination-SniperMove, Child[5]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=OverrideIdealRange-21, NodeType=Action, Param[0]=21)

+Behaviors=(BehaviorName=SniperMoveWithLoS, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=SniperMoveWithLoSUnsafe)
+Behaviors=(BehaviorName=SniperMoveWithLoSUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=FindDestinationWithLoS-SniperMove, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=NCSniperMoveWithLoS, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=NCSniperMoveWithLoSUnsafe)
+Behaviors=(BehaviorName=NCSniperMoveWithLoSUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=SetNoCoverMovement, Child[3]=FindDestinationWithLoS-SniperMove, Child[4]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindFriendlySniperDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAllyLoS, Child[2]=FindRestrictedDestination-SniperMove)

+Behaviors=(BehaviorName=SniperMoveIfFirstAbility, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SniperMove)
+Behaviors=(BehaviorName=SniperMoveIfFirstAbilityUnsafe, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SniperMoveUnsafe)
+Behaviors=(BehaviorName=SniperMoveWithLoSIfFirstAbility, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SniperMoveWithLoS)
+Behaviors=(BehaviorName=SniperMoveWithLoSIfFirstAbilityUnsafe, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SniperMoveWithLoSUnsafe)

; ----------------------------------------------------------------------------------------------------------
; ---------------------------- SIDEWINDER (VIPER FLANKER) --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------

; move unsafely with first move to flank, under assumption will hit and get third move
+Behaviors=(BehaviorName="LWSidewinderHitAndRun::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=LWSidewinderRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=LWSidewinderRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=LWSidewinderRedAbilitySelector)
+Behaviors=(BehaviorName=LWSidewinderRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=LWSidewinderRedFirstAction, Child[2]=LWSidewinderRedSecondAction, Child[3]=LWSidewinderRedLastAction, Child[4]=TrySlitherPostStandardShot, Child[5]=AlienRedFallbackAction)
+Behaviors=(BehaviorName=WasLastAbility-StandardShot, NodeType=Condition)

+Behaviors=(BehaviorName=TrySlitherPostStandardShot, NodeType=Sequence, Child[0]=WasLastAbility-StandardShot, Child[1]=FindStealthDestination_AvoidEnemy, Child[2]=SelectAbility-StandardMove)

+Behaviors=(BehaviorName=LWSidewinderRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=LWSidewinderRedFirstActionSelector)
+Behaviors=(BehaviorName=LWSidewinderRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=MoveFlankingUnsafe, \\
	Child[1]=DoIfFlankedMove, \\
	Child[2]=NeedsReload, \\
	Child[3]=SelectMove_JobOrAggressive, \\
	Child[4]=TryBDAttackOrSpit7030_LW, \\
	Child[5]=TryLWViperShootOrReloadOrOverwatch, \\
	Child[6]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=LWSidewinderRedSecondAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=LWSidewinderRedSecondActionSelector)
+Behaviors=(BehaviorName=LWSidewinderRedSecondActionSelector, NodeType=Selector, \\
	Child[0]=TryBDAttackOrSpit7030_LW, \\
	Child[1]=TryLWViperShootOrReloadOrOverwatch, \\
	Child[2]=HuntEnemyWithCover, \\
	Child[3]=SelectMove_JobOrDefensive)

+Behaviors=(BehaviorName=LWSidewinderRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=LWSidewinderRedLastActionSelector)
+Behaviors=(BehaviorName=LWSidewinderRedLastActionSelector, NodeType=Selector, \\
	Child[0]=FallBackWithLoS)

+Behaviors=(BehaviorName=TryBDAttackOrSpit7030_LW, NodeType=RandSelector, Child[0]=TryLWViperShootOrReloadOrOverwatch, Param[0]=70, Child[1]=TryBD_AllPoisonSpits, Param[1]=30)
+Behaviors=(BehaviorName=TryBD_AllPoisonSpits, NodeType=Sequence, Child[0]=TryBD_PoisonSpitPrio, Child[1]=TryBD_PoisonSpit, Child[2]=TryBD_PoisonSpitSingle)
; ----------------------------------------------------------------------------------------------------------
; ---------------------- SectoidM2_LW (SECTOID COMMANDER) --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; Currently a placeholder copy of the Sectoid
; Needs updating for active abilities:
; 'BD_MassMindSpin_LW' -- like mindspin, but more people -- cone AOE Targetable attack
; 'BD_MassReanimation_LW' -- like gatekeeper ability, but unique because of animations
+Behaviors=(BehaviorName="LWSectoidM2::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=SectoidM2_LWRedAlert, Child[3]=SectoidM2_LWNoEnemySightedMove)
+Behaviors=(BehaviorName=SectoidM2_LWRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=SectoidM2_LWRedAbilitySelector)
+Behaviors=(BehaviorName=SectoidM2_LWRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=SectoidM2_LWRedFirstAction, Child[2]=SectoidM2_LWRedLastAction, Child[3]=AlienRedFallbackAction)

+Behaviors=(BehaviorName=SectoidM2_LWRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SectoidM2_LWRedFirstActionSelector)
+Behaviors=(BehaviorName=SectoidM2_LWRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=TryKillShot, \\
	Child[2]=TryMoveForBD_MassReanimation_LWMany, \\
	Child[3]=TryMoveForBD_MassMindSpin_LWMany, \\
	Child[4]=NeedsReload, \\
	Child[5]=SelectMove_JobOrDefensive, \\
	Child[6]=TryMoveForBD_MassMindSpin_LWFew, \\
	Child[7]=TryMoveForBD_MassReanimation_LWFew, \\
	Child[8]=TryShootOrReloadOrOverwatch, \\
	Child[9]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=SectoidM2_LWRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=SectoidM2_LWRedLastActionSelector)
+Behaviors=(BehaviorName=SectoidM2_LWRedLastActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=TryKillShot, \\
	Child[2]=TryBD_MassReanimation_LWMany, \\
	Child[3]=TryBD_MassMindSpin_LWMany, \\
	Child[4]=TryHighPriorityShot, \\
	Child[5]=TryBD_MassMindSpin_LWFew, \\
	Child[6]=TryBD_MassReanimation_LWFew, \\
	Child[7]=TryShootOrReloadOrOverwatch, \\
	Child[8]=HuntEnemyWithCover, \\
	Child[9]=SelectMove_JobOrDefensive)

; ---------------- No enemy sighted re-animation actions ---------------------------
+Behaviors=(BehaviorName=SectoidM2_LWNoEnemySightedMove, NodeType=Selector, Child[0]=GenericOrangeMovement, Child[1]=SectoidM2_LWYellowAlert, Child[2]=GenericGreenMovement)
+Behaviors=(BehaviorName=SectoidM2_LWYellowAlert, NodeType=Sequence, Child[0]=IsYellowAlert, Child[1]=SectoidM2_LWYellowAbilitySelector)
+Behaviors=(BehaviorName=SectoidM2_LWYellowAbilitySelector, NodeType=Selector, Child[0]=TryBD_MassReanimation_LWMany, Child[1]=GenericAlertHandler)

; ---------------- Mass Mindspin (SectoidM2_LW) -----------------------------------------
+Behaviors=(BehaviorName=TryBD_MassMindSpin_LWMany, NodeType=Sequence, Child[0]=IsAbilityAvailable-BD_MassMindSpin_LW, Child[1]=FindPotentialAoETargets-BD_MassMindSpin_LWManyProfile, Child[2]=SelectAoETarget-BD_MassMindSpin_LWManyProfile,  Child[3]=SelectAbility-BD_MassMindSpin_LW)
+Behaviors=(BehaviorName=TryBD_MassMindSpin_LWFew, NodeType=Sequence, Child[0]=IsAbilityAvailable-BD_MassMindSpin_LW, Child[1]=FindPotentialAoETargets-BD_MassMindSpin_LWFewProfile, Child[2]=SelectAoETarget-BD_MassMindSpin_LWFewProfile,  Child[3]=SelectAbility-BD_MassMindSpin_LW)

+Behaviors=(BehaviorName=TryMoveThenBD_MassMindSpin_LWMany, NodeType=Selector, Child[0]=TryMoveForBD_MassMindSpin_LWMany, Child[1]=TryBD_MassMindSpin_LWMany)
+Behaviors=(BehaviorName=TryMoveForBD_MassMindSpin_LWMany, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-BD_MassMindSpin_LW, Child[2]=FindPotentialAoETargets-BD_MassMindSpin_LWManyProfile, Child[3]=MoveStandardIfFirstAbility-BD_MassMindSpin_LW)

+Behaviors=(BehaviorName=TryMoveThenBD_MassMindSpin_LWFew, NodeType=Selector, Child[0]=TryMoveForBD_MassMindSpin_LWFew, Child[1]=TryBD_MassMindSpin_LWFew)
+Behaviors=(BehaviorName=TryMoveForBD_MassMindSpin_LWFew, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-BD_MassMindSpin_LW, Child[2]=FindPotentialAoETargets-BD_MassMindSpin_LWFewProfile, Child[3]=MoveStandardIfFirstAbility-BD_MassMindSpin_LW)

+Behaviors=(BehaviorName=MoveStandardIfFirstAbility-BD_MassMindSpin_LW, NodeType=Sequence, Child[0]=IsAbilityAvailable-BD_MassMindSpin_LW, Child[1]=NotLastActionPoint, Child[2]=FindBD_MassMindSpin_LWDestination, Child[3]=SelectAbility-BD_MassMindSpin_LW)
+Behaviors=(BehaviorName=FindBD_MassMindSpin_LWDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAbilityRange-BD_MassMindSpin_LW, Child[2]=RestrictToEnemyLoS, Child[3]=FindRestrictedDestination-MWP_Defensive)

+Behaviors=(BehaviorName=IsAbilityAvailable-BD_MassMindSpin_LW, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-BD_MassMindSpin_LW, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-BD_MassMindSpin_LW, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-BD_MassMindSpin_LW, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-BD_MassMindSpin_LW, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-BD_MassMindSpin_LW, NodeType=Action)

; ---------------- Mass Psi Reanimate (SectoidM2_LW) ------------------------------------
+Behaviors=(BehaviorName=TryBD_MassReanimation_LWMany, NodeType=Sequence, Child[0]=IsAbilityAvailable-BD_MassReanimation_LW, Child[1]=FindPotentialAoETargets-BD_MassReanimation_LWManyProfile, Child[2]=SelectAoETarget-BD_MassReanimation_LWManyProfile,  Child[3]=SelectAbility-BD_MassReanimation_LW)
+Behaviors=(BehaviorName=TryBD_MassReanimation_LWFew, NodeType=Sequence, Child[0]=IsAbilityAvailable-BD_MassReanimation_LW, Child[1]=FindPotentialAoETargets-BD_MassReanimation_LWFewProfile, Child[2]=SelectAoETarget-BD_MassReanimation_LWFewProfile,  Child[3]=SelectAbility-BD_MassReanimation_LW)

+Behaviors=(BehaviorName=TryMoveThenBD_MassReanimation_LWMany, NodeType=Selector, Child[0]=TryMoveForBD_MassReanimation_LWMany, Child[1]=TryBD_MassReanimation_LWMany)
+Behaviors=(BehaviorName=TryMoveForBD_MassReanimation_LWMany, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-BD_MassReanimation_LW, Child[2]=FindPotentialAoETargets-BD_MassReanimation_LWManyProfile, Child[3]=MoveStandardIfFirstAbility-BD_MassReanimation_LW)

+Behaviors=(BehaviorName=TryMoveThenBD_MassReanimation_LWFew, NodeType=Selector, Child[0]=TryMoveForBD_MassReanimation_LWFew, Child[1]=TryBD_MassReanimation_LWFew)
+Behaviors=(BehaviorName=TryMoveForBD_MassReanimation_LWFew, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-BD_MassReanimation_LW, Child[2]=FindPotentialAoETargets-BD_MassReanimation_LWFewProfile, Child[3]=MoveStandardIfFirstAbility-BD_MassReanimation_LW)

+Behaviors=(BehaviorName=MoveStandardIfFirstAbility-BD_MassReanimation_LW, NodeType=Sequence, Child[0]=IsAbilityAvailable-BD_MassReanimation_LW, Child[1]=NotLastActionPoint, Child[2]=FindBD_MassReanimation_LWDestination, Child[3]=SelectAbility-BD_MassReanimation_LW)
+Behaviors=(BehaviorName=FindBD_MassReanimation_LWDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAbilityRange-BD_MassReanimation_LW, Child[2]=RestrictToEnemyLoS, Child[3]=FindRestrictedDestination-MWP_Defensive)

+Behaviors=(BehaviorName=IsAbilityAvailable-BD_MassReanimation_LW, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-BD_MassReanimation_LW, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-BD_MassReanimation_LW, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-BD_MassReanimation_LW, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-BD_MassReanimation_LW, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-BD_MassReanimation_LW, NodeType=Action)

; ----------------------------------------------------------------------------------------------------------
; ------------------------------------------ LWDrone -------------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; Select attack if in range, otherwise defend
+Behaviors=(BehaviorName="LWDrone::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=BD_LWDroneRedAlert, Child[3]=GenericAlertHandler)

+Behaviors=(BehaviorName=BD_LWDroneRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=BD_LWDroneRedAbilitySelector)
+Behaviors=(BehaviorName=BD_LWDroneRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=BD_LWDroneRedFirstAction, Child[2]=BD_LWDroneRedLastAction, Child[3]=MECRedFallbackAction)

+Behaviors=(BehaviorName=BD_LWDroneRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=BD_LWDroneRedFirstActionSelector)
+Behaviors=(BehaviorName=BD_LWDroneRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryHighPriorityShock_BD, \\
	Child[1]=TryMoveForDroneRepair_BD, \\
	Child[2]=TryMoveForDroneMeleeStun_BD, \\
	Child[3]=TryDroneFlankingMove_BD, \\
	Child[4]=TryDroneRegularMove_BD, \\
	Child[5]=HuntEnemyUnsafe)


+Behaviors=(BehaviorName=BD_LWDroneRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=BD_LWDroneRedLastActionSelector)
+Behaviors=(BehaviorName=BD_LWDroneRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryMeleeStun_BD, \\
	Child[1]=TryHighPriorityShock_BD, \\
	Child[2]=DroneRepairIfAvailable_BD, \\
	Child[3]=ShockIfAvailable_BD, \\
	Child[4]=HuntEnemyUnsafe, \\
	Child[5]=TryDroneRegularMove_BD)

+Behaviors=(BehaviorName=TryDroneFlankingMove_BD, NodeType=Sequence, Child[0]=IsMyJob-Soldier, Child[1]=IsAbilityAvailable-StandardMove, Child[2]=ResetDestinationSearch, Child[3]=RestrictToFlanking, Child[4]=SetNoCoverMovement, Child[5]=RestrictToAbilityRange-BD_DroneShock_LW, Child[6]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=TryDroneRegularMove_BD, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=SetNoCoverMovement, Child[3]=RestrictToAbilityRange-BD_DroneShock_LW, Child[4]=SelectAbility-StandardMove)

+Behaviors=(BehaviorName=TryHighPriorityShock_BD, NodeType=Sequence, Child[0]=IsAbilityAvailable-BD_DroneShock_LW, Child[1]=HaveHighPriorityShockTarget_BD, Child[2]=ShockIfAvailable_BD)
+Behaviors=(BehaviorName=HaveHighPriorityShockTarget_BD, NodeType=Sequence, Child[0]=SetTargetStack-BD_DroneShock_LW, Child[1]=FindHighPriorityTarget, Child[2]=HasValidTarget-BD_DroneShock_LW)

+Behaviors=(BehaviorName=TryMeleeStun_BD, NodeType=Sequence, Child[0]=IsAbilityAvailable-BD_DroneMeleeStun_LW, Child[1]=SelectTargetForMeleeStun_BD, Child[2]=SelectAbility-BD_DroneMeleeStun_LW)
+Behaviors=(BehaviorName=SelectTargetForMeleeStun_BD, NodeType=Sequence, Child[0]=SetTargetStack-BD_DroneMeleeStun_LW, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-BD_DroneMeleeStun_LW)

+Behaviors=(BehaviorName=ShockIfAvailable_BD, NodeType=Sequence, Child[0]=IsAbilityAvailable-BD_DroneShock_LW, Child[1]=SelectTargetForShock_BD, Child[2]=SelectAbility-BD_DroneShock_LW)
+Behaviors=(BehaviorName=SelectTargetForShock_BD, NodeType=Sequence, Child[0]=SetTargetStack-BD_DroneShock_LW, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-BD_DroneShock_LW)

+Behaviors=(BehaviorName=DroneRepairIfAvailable_BD, NodeType=Sequence, Child[0]=IsAbilityAvailable-BD_DroneRepair_LW, Child[1]=SelectTargetForDroneRepair_BD, Child[2]=SelectAbility-BD_DroneRepair_LW)

+Behaviors=(BehaviorName=TryMoveForDroneRepair_BD, NodeType=Sequence, Child[0]=IsMyJob-Support, Child[1]=SafeToMove, Child[2]=IsAbilityReady-BD_DroneRepair_LW, Child[3]=SelectTargetForDroneRepair_BD, Child[4]=MoveStandardIfFirstAbility-BD_DroneRepair_LW)
+Behaviors=(BehaviorName=MoveStandardIfFirstAbility-BD_DroneRepair_LW, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=FindDroneRepairDestination_BD, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindDroneRepairDestination_BD, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToPotentialTargetRange-BD_DroneRepair_LW, Child[2]=FindRestrictedDestination-MWP_Fanatic)

+Behaviors=(BehaviorName=SelectTargetForDroneRepair_BD, NodeType=Sequence, Child[0]=SetTargetStack-BD_DroneRepair_LW, Child[1]=SelectBestTargetForDroneRepair_BD, Child[2]=HasValidTarget-BD_DroneRepair_LW)
+Behaviors=(BehaviorName=SelectBestTargetForDroneRepair_BD, NodeType=RepeatUntilFail, Child[0]=EvaluateTargetsDroneRepair_BD)
+Behaviors=(BehaviorName=EvaluateTargetsDroneRepair_BD, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreHighestSoldierRank, Child[2]=TargetScoreHealth, Child[3]=TargetScoreInvalidateCivilians, Child[4]=UpdateBestTarget)

+Behaviors=(BehaviorName=TryMoveForDroneMeleeStun_BD, NodeType=Sequence, Child[0]=IsMyJob-Aggressor, Child[1]=IsAbilityReady-BD_DroneMeleeStun_LW, Child[2]=SelectTargetForDroneMeleeStun_BD, Child[3]=MoveStandardIfFirstAbility-BD_DroneMeleeStun_LW)
+Behaviors=(BehaviorName=MoveStandardIfFirstAbility-BD_DroneMeleeStun_LW, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=FindDroneMeleeStunDestination_BD, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindDroneMeleeStunDestination_BD, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToPotentialTargetRange-BD_DroneMeleeStun_LW, Child[2]=FindRestrictedDestination-MWP_Fanatic)

+Behaviors=(BehaviorName=SelectTargetForDroneMeleeStun_BD, NodeType=Sequence, Child[0]=SetTargetStack-BD_DroneMeleeStun_LW, Child[1]=SelectBestTargetForDroneMeleeStun_BD, Child[2]=HasValidTarget-BD_DroneMeleeStun_LW)
+Behaviors=(BehaviorName=SelectBestTargetForDroneMeleeStun_BD, NodeType=RepeatUntilFail, Child[0]=EvaluateTargetsDroneMeleeStun_BD)
+Behaviors=(BehaviorName=EvaluateTargetsDroneMeleeStun_BD, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreHighestSoldierRank, Child[2]=TargetScoreHealth, Child[3]=TargetScoreInvalidateCivilians, Child[4]=UpdateBestTarget)

+Behaviors=(BehaviorName=IsAbilityAvailable-BD_DroneShock_LW, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-BD_DroneShock_LW, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-BD_DroneShock_LW, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-BD_DroneShock_LW, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-BD_DroneShock_LW, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-BD_DroneShock_LW, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToPotentialTargetRange-BD_DroneShock_LW, NodeType=Action)

+Behaviors=(BehaviorName=IsAbilityAvailable-BD_DroneMeleeStun_LW, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-BD_DroneMeleeStun_LW, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-BD_DroneMeleeStun_LW, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-BD_DroneMeleeStun_LW, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-BD_DroneMeleeStun_LW, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-BD_DroneMeleeStun_LW, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToPotentialTargetRange-BD_DroneMeleeStun_LW, NodeType=Action)

+Behaviors=(BehaviorName=IsAbilityAvailable-BD_DroneRepair_LW, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-BD_DroneRepair_LW, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-BD_DroneRepair_LW, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-BD_DroneRepair_LW, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-BD_DroneRepair_LW, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-BD_DroneRepair_LW, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToPotentialTargetRange-BD_DroneRepair_LW, NodeType=Action)

; ----------------------------------------------------------------------------------------------------------
; ------------------------------------- Chryssalid Behavior-(Currently rubbish)-----------------------------
; ----------------------------------------------------------------------------------------------------------
+Behaviors=(BehaviorName="LWHiveQueen::CharacterRoot", NodeType=Selector, Child[0]=ChryssalidCocoonBranch, Child[1]=ChryssalidRoot)

; ----------------------------------------------------------------------------------------------------------
; ------------------------------------- Great Archon-----------------------------
; ----------------------------------------------------------------------------------------------------------

+Behaviors=(BehaviorName=IsAbilityAvailable-StandalonePinionsStage1, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-StandalonePinionsStage1, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-StandalonePinionsStage1, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-StandalonePinionsStage1, NodeType=Action)

+Behaviors=(BehaviorName=TryStandalonePinions, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandalonePinionsStage1, Child[1]=FindPotentialAoETargets-StandalonePinionsBasicProfile, Child[2]=SelectAoETarget-StandalonePinionsBasicProfile, Child[3]=SelectAbility-StandalonePinionsStage1)

+Behaviors=(BehaviorName="LWGreatArchon::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=GreatArchonRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=GreatArchonRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=GreatArchonRedAbilitySelector)
+Behaviors=(BehaviorName=GreatArchonRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=GreatArchonRedFirstAction, Child[2]=GreatArchonRedLastAction)

+Behaviors=(BehaviorName=GreatArchonRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=GreatArchonFirstActionSelector)
+Behaviors=(BehaviorName=GreatArchonFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryFrenziedMoveAndAttack, \\
	Child[1]=TryMoveThenStandalonePinions, \\
	Child[2]=TryStandardMelee, \\
	Child[3]=DoIfFlankedMove, \\
	Child[4]=SelectMoveStandard, \\
	Child[5]=TryShootOrReloadOrOverwatch, \\
	Child[6]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=TryMoveThenStandalonePinions, NodeType=Selector, Child[0]=TryMoveForStandalonePinions, Child[1]=TryStandalonePinions)
+Behaviors=(BehaviorName=TryMoveForStandalonePinions, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-StandalonePinionsStage1, Child[2]=FindPotentialAoETargets-StandalonePinionsBasicProfile, Child[3]=MoveStandardIfFirstAbility-StandalonePinions)
+Behaviors=(BehaviorName=MoveStandardIfFirstAbility-StandalonePinions, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=FindStandalonePinionsDestination, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindStandalonePinionsDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAbilityRange-StandalonePinionsStage1, Child[2]=RestrictToEnemyLoS, Child[3]=FindRestrictedDestination-MWP_Fanatic)

+Behaviors=(BehaviorName=GreatArchonRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=GreatArchonRedLastActionSelector)
+Behaviors=(BehaviorName=GreatArchonRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryFrenziedAttack, \\
	Child[1]=TryStandalonePinions, \\
	Child[2]=TryStandardMelee, \\
	Child[3]=TryShootOrReloadOrOverwatch, \\
	Child[4]=HuntEnemy, \\
	Child[5]=SelectMoveStandard)

+Behaviors=(BehaviorName=TryFrenziedAttack, NodeType=Sequence, Child[0]=AffectedByEffect-FrenzyEffect, Child[1]=TryStandardMelee)
+Behaviors=(BehaviorName=TryFrenziedMoveAndAttack, NodeType=Sequence, Child[0]=AffectedByEffect-FrenzyEffect, Child[1]=TryAttackOrDashAndAttack)
+Behaviors=(BehaviorName=TryAttackOrDashAndAttack, NodeType=Selector, Child[0]=TryStandardMelee, Child[1]=TryStandardMeleeDashFANATICUnsafe)

; ---------------------------------------------------------------------------------------------------------
; ------------------- ADVENT SERGEANT ---------------------------------------------------------------------
; ---------------Uses base AI with Suppression Node--------------------------------------------------------

+Behaviors=(BehaviorName="LWAdventSergeantRoot::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=LWAdventSergeantRedAlert, Child[3]=GenericAlertHandler)

+Behaviors=(BehaviorName=LWAdventSergeantRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=LWAdventSergeantRedAbilitySelector)
+Behaviors=(BehaviorName=LWAdventSergeantRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=LWAdventSergeantRedFirstAction, Child[2]=LWAdventSergeantRedLastAction)

+Behaviors=(BehaviorName=LWAdventSergeantRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=LWAdventSergeantFirstActionSelector)
+Behaviors=(BehaviorName=LWAdventSergeantFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=TryHighPriorityShot, \\
	Child[2]=TryMoveThenGrenade, \\
	Child[3]=TryMarkTargetOption, \\
	Child[4]=ShootOrSuppressIfNoGoodShot, \\
	Child[5]=SelectMove_JobOrDefensive, \\
	Child[6]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=LWAdventSergeantRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=LWAdventSergeantRedLastActionSelector)
+Behaviors=(BehaviorName=LWAdventSergeantRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryGrenade, \\
	Child[1]=TryMarkTargetOption, \\
	Child[2]=ShootOrSuppressIfNoGoodShot, \\
	Child[3]=HuntEnemyWithCover, \\
	Child[4]=SelectMove_JobOrDefensive)

; ----------------------------------------------------------------------------------------------------------
; ------------------------------------- MISC NEW BT NODES --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------

; MoveStandardWithLoSUnsafeIgnoreHazards: Equivalent to MoveStandardWithLoSUnsafe except will also ignore hazards
; in tiles.
+Behaviors=(BehaviorName="MoveStandardWithLoSUnsafeIgnoreHazards", NodeType="Sequence", Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=IgnoreHazards, Child[3]=FindDestinationWithLoS-MWP_Standard, Child[4]=SelectAbility-StandardMove)

; MoveStandardUnsafeIgnoreHazards: Equivalent to MoveStandardUnsafe except will also ignore hazards
+Behaviors=(BehaviorName="MoveStandardUnsafeIgnoreHazards", NodeType="Sequence", Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=IgnoreHazards, Child[3]=FindDestination-MWP_Standard, Child[4]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName="MoveStandardUnsafeIgnoreHazards", NodeType="Sequence", Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=IgnoreHazards, Child[3]=FindDestination-MWP_Standard, Child[4]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=MoveAdvanceToCoverUnsafeIgnoreHazards, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=IgnoreHazards, Child[3]=FindDestination-MWP_AdvanceCover, Child[4]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=MoveAdvanceToCoverLoSUnsafeIgnoreHazards, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=IgnoreHazards, Child[3]=FindDestinationWithLoS-MWP_AdvanceCover, Child[4]=SelectAbility-StandardMove)

; ConsiderTakingOverwatchLastAction - If we have only bad shots (<50%) and this is our last action point, try overwatching without any regard for the
; number of already overwatching allies.
+Behaviors=(BehaviorName="ConsiderTakingOverwatchLastAction", NodeType="Sequence", Child[0]=AllShotPercentagesBelow50, Child[1]=IsLastActionPoint, Child[2]=RandOverwatch50)

; AvoidDoubleMove - Conditions for which we should try to avoid double moving, and instead overwatch.
; Currently: If we can see any enemies, it's preferable to OW instead of taking a second move. This avoids enemies move/OWing instead of
; trying to catch up to XCOM when they're being outrun.
; Also aggressively overwatch with last action instead of double move if near evac
+Behaviors=(BehaviorName=AvoidDoubleMove, NodeType=Selector, Child[0]=AnyLivingEnemyVisible, Child[1]=EvacWithinVisRange)
; TryOverwatchLastAction - If this is the last action and we're in double-move avoidance mode, overwatch if it is available.
+Behaviors=(BehaviorName=TryOverwatchLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=AvoidDoubleMove, Child[2]=TryOverwatch)
