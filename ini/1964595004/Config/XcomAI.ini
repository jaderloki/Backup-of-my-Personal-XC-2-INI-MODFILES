[XComGame.XGAIBehavior]
;Add random move profile for custom yellow alert movement
m_arrMoveWeightProfile=(Profile=YellowAlert, fRandWeight=5.0)

[XComGame.X2AIBTBehaviorTree]
;Remove CBRM, reflex action points are good enough
-Behaviors=(BehaviorName=CounterBeaglerushManeuver, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectFlankedEnemyTarget, Child[2]=ShootTargetChance50)
+Behaviors=(BehaviorName=CounterBeaglerushManeuver, NodeType=Failer, Child[0]=IsAbilityAvailable-StandardShot)

;Rework some of the ways alerts are scored when determining the best alert
-Behaviors=(BehaviorName=ScoreIfAlertDataScary, NodeType=Sequence, Child[0]=IsAlertDataScary, Child[1]=AddToAlertDataScore_50)
+Behaviors=(BehaviorName=ScoreIfAlertDataScary, NodeType=Sequence, Child[0]=IsAlertDataScary, Child[1]=AddToAlertDataScore_25)

-Behaviors=(BehaviorName=IsAlertDataScary, NodeType=Selector, Child[0]=AlertDataIsType-TakingFire, Child[1]=AlertDataIsType-DetectedAllyTakingDamage, Child[2]=AlertDataIsType-SeesExplosion, Child[3]=AlertDataIsType-SeesAlertedAllies)
;removed SeesAlertedAllies because those are not that scary!,add PodJob for Pod Job alerts, this will keep these alerts from being purged too early
+Behaviors=(BehaviorName=IsAlertDataScary, NodeType=Selector, Child[0]=AlertDataIsType-TakingFire, Child[1]=AlertDataIsType-DetectedAllyTakingDamage, Child[2]=AlertDataIsType-SeesExplosion, Child[3]=IsAlertPodJob)
-Behaviors=(BehaviorName=ScoreAlert_SpottedCorpse, NodeType=Sequence, Child[0]=AlertDataIsCorpseThere, Child[1]=AddToAlertDataScore_30)
+Behaviors=(BehaviorName=ScoreAlert_SpottedCorpse, NodeType=Sequence, Child[0]=AlertDataIsCorpseThere, Child[1]=AddToAlertDataScore_20)

-Behaviors=(BehaviorName=ScoreAlert_HeardNoise, NodeType=Sequence, Child[0]=AlertDataWasSoundMade, Child[1]=AddToAlertDataScore_15, Child[2]=IfAlertNoiseIsScary)
+Behaviors=(BehaviorName=ScoreAlert_HeardNoise, NodeType=Sequence, Child[0]=AlertDataWasSoundMade, Child[1]=AddToAlertDataScore_25, Child[2]=IfAlertNoiseIsScary)

;use this to remove alerts that have been investigated once the enemy are on top of the alert we want to remove because nothing was found (With the exception of PodJob which is now used for pod job manager alerts)
-Behaviors=(BehaviorName=ScoreAlertDataDistance, NodeType=Selector, Child[0]=IfAlertDataFar, Child[1]=IfAlertDataThreeMoves, Child[2]=IfAlertDataTwoMoves, Child[3]=AddToAlertDataScore_20)
+Behaviors=(BehaviorName=ScoreAlertDataDistance, NodeType=Selector, Child[0]=EndIfPodJob, Child[1]=IfAlertDataClose, Child[2]=IfAlertDataFar, Child[3]=IfAlertDataThreeMoves, Child[4]=IfAlertDataTwoMoves, Child[5]=AddToAlertDataScore_20)
+Behaviors=(BehaviorName=EndIfPodJob, NodeType=Sequence, Child[0]=AlertDataIsType-UNUSED_3, Child[1]=AddToAlertDataScore_0)
+Behaviors=(BehaviorName=IfAlertDataClose, NodeType=Sequence, Child[0]=IsAlertDataClose, Child[1]=DeleteCurrentAlertData, Child[2]=AddToAlertDataScore_-100)
+Behaviors=(BehaviorName=IsAlertDataClose, NodeType=StatCondition, Param[0]=AlertDataDistance, Param[1]="<", Param[2]="7")

;Add a score for PodJob they are already scored as scary, with this addition they will have the highest priority (This is used for the pod job assignments)
+Behaviors=(BehaviorName=IfPodJob, NodeType=Selector, Child[0]=ScoreIfIsPodJob, Child[1]=AddToAlertDataScore_0)
+Behaviors=(BehaviorName=ScoreIfIsPodJob, NodeType=Sequence, Child[0]=IsAlertPodJob, Child[1]=AddToAlertDataScore_25)
+Behaviors=(BehaviorName=IsAlertPodJob, NodeType=Selector, Child[0]=AlertDataIsType-UNUSED_3, Child[1]=AlertDataIsType-UNUSED_4)
+Behaviors=(BehaviorName=AlertDataIsType-UNUSED_3, NodeType=Condition)
+Behaviors=(BehaviorName=AlertDataIsType-UNUSED_4, NodeType=Condition)

;Remove SeesAlertedAllies alerts, these are helpful for triggering yellow alerts but nothing else
+Behaviors=(BehaviorName=IfAlertIsSeesAlertedAllies, NodeType=Selector, Child[0]=ScoreIfIsSeesAlertedAllies, Child[1]=AddToAlertDataScore_0)
+Behaviors=(BehaviorName=ScoreIfIsSeesAlertedAllies, NodeType=Sequence, Child[0]=IsAlertSeesAlertedAllies, Child[1]=DeleteCurrentAlertData, Child[2]=AddToAlertDataScore_-100)
+Behaviors=(BehaviorName=IsAlertSeesAlertedAllies, NodeType=Selector, Child[0]=AlertDataIsType-SeesAlertedAllies)

;lower the score for throttling alerts 
;these are used when the pods have no alert to patrol to, the game creates one within their encounter area
+Behaviors=(BehaviorName=IfAlertIsThrottlingBeacon, NodeType=Selector, Child[0]=ScoreIfIsThrottlingBeacon, Child[1]=AddToAlertDataScore_0)
+Behaviors=(BehaviorName=ScoreIfIsThrottlingBeacon, NodeType=Sequence, Child[0]=IsAlertThrottlingBeacon, Child[1]=AddToAlertDataScore_10)
+Behaviors=(BehaviorName=IsAlertThrottlingBeacon, NodeType=Selector, Child[0]=AlertDataIsType-ThrottlingBeacon)

;Add scoring for mapwide hostile alerts set by kismet
+Behaviors=(BehaviorName=IfAlertIsMapwideAlertHostile, NodeType=Selector, Child[0]=ScoreIfIsMapwideAlertHostile, Child[1]=AddToAlertDataScore_0)
+Behaviors=(BehaviorName=ScoreIfIsMapwideAlertHostile, NodeType=Sequence, Child[0]=IsAlertMapwideAlertHostile, Child[1]=AddToAlertDataScore_100)
+Behaviors=(BehaviorName=IsAlertMapwideAlertHostile, NodeType=Selector, Child[0]=AlertDataIsType-MapwideAlert_Hostile)
+Behaviors=(BehaviorName=AlertDataIsType-MapwideAlert_Hostile, NodeType=Condition)
;Add scoring for mapwide peaceful alerts set by kismet
+Behaviors=(BehaviorName=IfAlertIsMapwideAlertPeaceful, NodeType=Selector, Child[0]=ScoreIfIsMapwideAlertPeaceful, Child[1]=AddToAlertDataScore_0)
+Behaviors=(BehaviorName=ScoreIfIsMapwideAlertPeaceful, NodeType=Sequence, Child[0]=IsAlertMapwideAlertPeaceful, Child[1]=AddToAlertDataScore_75)
+Behaviors=(BehaviorName=IsAlertMapwideAlertPeaceful, NodeType=Selector, Child[0]=AlertDataIsType-MapwideAlert_Peaceful)
+Behaviors=(BehaviorName=AlertDataIsType-MapwideAlert_Peaceful, NodeType=Condition)

;add the new scoring for throttling beacons, seesAlertedAllies, seesmoke (Using this for the pod job manager assigned alerts), mapwide alerts
-Behaviors=(BehaviorName=GenericScoreAlertData, NodeType=Sequence, Child[0]=SSScoreInvalidAlertData, Child[1]=IfAlertIsSpottedTarget, Child[2]=IfAlertDataIsScary, Child[3]=IfAlertIsSpottedCorpse, Child[4]=IfAlertIsHeardNoise, Child[5]=IfAlertIsDangerous, Child[6]=ScoreAlertDataAge, Child[7]=ScoreAlertDataDistance)
+Behaviors=(BehaviorName=GenericScoreAlertData, NodeType=Sequence, Child[0]=SSScoreInvalidAlertData, Child[1]=IfAlertIsSpottedTarget, Child[2]=IfAlertDataIsScary, Child[3]=IfAlertIsSpottedCorpse, Child[4]=IfAlertIsHeardNoise, Child[5]=IfAlertIsDangerous, Child[6]=ScoreAlertDataAge, Child[7]=ScoreAlertDataDistance, Child[8]=IfAlertIsSeesAlertedAllies, Child[9]=IfAlertIsThrottlingBeacon, Child[10]=IfPodJob, Child[11]=IfAlertIsMapwideAlertHostile, Child[12]=IfAlertIsMapwideAlertPeaceful)

;Add the random yellow alert move, to replace the heak seek cheat move
-Behaviors=(BehaviorName=GenericAlertHandler, NodeType=Selector, Child[0]=GenericOrangeMovement, Child[1]=GenericYellowMovement, Child[2]=SelectHeatSeekMove)
+Behaviors=(BehaviorName=GenericAlertHandler, NodeType=Selector, Child[0]=GenericOrangeMovement, Child[1]=GenericYellowMovement, Child[2]=MoveRandomUnsafeYellowAlert, Child[3]=SelectHeatSeekMove)

;Yellow Alert Movement by default cheats if theren't any alerts available it heat seaks to the nearest unit.  
;add new behavior to remove the cheat once an alert expires and create random movement points
+Behaviors=(BehaviorName=MoveRandomUnsafeYellowAlert, NodeType=Sequence, Child[0]=IsYellowAlert, Child[1]=IsAbilityAvailable-StandardMove, Child[2]=ResetDestinationSearch, Child[3]=UseDashMovement, Child[4]=FindRestrictedDestination-YellowAlert, Child[5]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindRestrictedDestination-YellowAlert, NodeType=Action)

;"GenericGreenMovement" - Only use green movement in green alert.  Removed the unrevealed check
-Behaviors=(BehaviorName=GenericGreenMovement, NodeType=Sequence, Child[0]=ShouldPatrol, Child[1]=GreenAlertActionSelector)
+Behaviors=(BehaviorName=GenericGreenMovement, NodeType=Sequence, Child[0]=IsGreenAlert, Child[1]=GreenAlertActionSelector)
-Behaviors=(BehaviorName=ChryssalidGreenAlert, NodeType=Sequence, Child[0]=ShouldPatrol, Child[1]=ChryssalidGreenAbilitySelector)
+Behaviors=(BehaviorName=ChryssalidGreenAlert, NodeType=Sequence, Child[0]=IsGreenAlert, Child[1]=ChryssalidGreenAbilitySelector)
-Behaviors=(BehaviorName=JobRoot_Hunter, NodeType=Sequence, Child[0]=ShouldPatrol, Child[1]=TryHunterJobUnrevealed)
+Behaviors=(BehaviorName=JobRoot_Hunter, NodeType=Sequence, Child[0]=IsGreenAlert, Child[1]=TryHunterJobUnrevealed)
-Behaviors=(BehaviorName=JobRoot_Defender, NodeType=Sequence, Child[0]=ShouldPatrol, Child[1]=TryDefenderJobUnrevealed)
+Behaviors=(BehaviorName=JobRoot_Defender, NodeType=Sequence, Child[0]=IsGreenAlert, Child[1]=TryDefenderJobUnrevealed)
-Behaviors=(BehaviorName=LostHowlerGreenAlertBehavior, NodeType=Sequence, Child[0]=ShouldPatrol, Child[1]=SkipMove) ; Do nothing until revealed.
+Behaviors=(BehaviorName=LostHowlerGreenAlertBehavior, NodeType=Sequence, Child[0]=IsGreenAlert, Child[1]=SkipMove)

;This fix allows units to enter overwatch upon scamper in green alert when given a defensive reflex action
; TryShootOrReloadOrOverwatch changes: Proceed as normal, but add a new node to the end such that if this is the last
; action point, force an overwatch if the ability is available. Intended to avoid double-moving units if they fail the
; random roll for overwatch. The sequence now is to try the overwatch roll, possibly just shoot, possibly reload (see below)
; and finally force an overwatch if we can. If overwatch isn't available we'll fail this node and try something else (probably
; move). Note that due to the first action node changes below we should usually not reload with this action if we are in
; last action point, we instead prefer to reload with the first action to avoid move-reload turns. This may still occur
; and is left in this node to handle cases where the unit does move, e.g. they're both flanked and out of ammo, they may
; move to get out of flank and then reload to be able to act next turn.
-Behaviors=(BehaviorName=TryShootOrReloadOrOverwatch, NodeType=Selector, Child[0]=ConsiderTakingOverwatch, Child[1]=ShootIfAvailable, Child[2]=NeedsReload)
+Behaviors=(BehaviorName=TryShootOrReloadOrOverwatch, NodeType=Selector, Child[0]=ConsiderTakingOverwatch, Child[1]=ShootIfAvailable, Child[2]=NeedsReload, Child[3]=TryOverwatchLastAction)
;
;; AvoidDoubleMove - Conditions for which we should try to avoid double moving, and instead overwatch.
;; Currently: If we can see any enemies, it's preferable to OW instead of taking a second move. This avoids enemies move/OWing instead of
;; trying to catch up to XCOM when they're being outrun.
+Behaviors=(BehaviorName=AvoidDoubleMove, NodeType=Selector, Child[0]=AnyLivingEnemyVisible)
;
;; TryOverwatchLastAction - If this is the last action and we're in double-move avoidance mode, overwatch if it is available.
+Behaviors=(BehaviorName=TryOverwatchLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=AvoidDoubleMove, Child[2]=TryOverwatch)
;
;;For ABA to allow def reflex action overwatch (note that ABA needs to load first for this to work otherwise you will have to edit the ABA AI ini directly
-Behaviors=(BehaviorName=TryShootOrReloadOrOverwatch_ABA, NodeType=Selector, Child[0]=ShootWhenFlanking, Child[1]=OverwatchOverride, Child[2]=ShootWhenKillShot, Child[3]=ShootWhenSuppressor, Child[4]=ShootWhenOverwatcher, Child[5]=ShootWhenSureShot, Child[6]=ConsiderTakingOverwatch, Child[7]=ShootIfAvailable, Child[8]=NeedsReload)
+Behaviors=(BehaviorName=TryShootOrReloadOrOverwatch_ABA, NodeType=Selector, Child[0]=ShootWhenFlanking, Child[1]=OverwatchOverride, Child[2]=ShootWhenKillShot, Child[3]=ShootWhenSuppressor, Child[4]=ShootWhenOverwatcher, Child[5]=ShootWhenSureShot, Child[6]=ConsiderTakingOverwatch, Child[7]=ShootIfAvailable, Child[8]=NeedsReload, Child[9]=TryOverwatchLastAction)

[XComGame.XComGameState_AIPlayerData]
-DownThrottleUnitCount=4  ; Number of enemies engaged to activate Down Throttling.
-UpThrottleTurnCount=2    ; Number of turns to pass before activating Up Throttling.
-DownThrottleGroupRange=50; Distance (meters) in which any non-engaged groups will be steered away as part of the Down Throttling effects.
;disable downthrottling
+DownThrottleUnitCount = 999 ; Number of enemies engaged to activate Down Throttling. DISABLED
+UpThrottleTurnCount = 9999  ; Number of turns to pass before activating Up Throttling. DISABLED
+DownThrottleGroupRange = 10; Distance (meters) in which any non-engaged groups will be steered away as part of the Down Throttling effects.